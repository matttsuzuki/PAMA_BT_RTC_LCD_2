
PAMA_LCD_BLUETOOTH_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d4  080075d4  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  080075d4  080075d4  000175d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075dc  080075dc  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e0  080075e0  000175e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  080075e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  20012c10  0801a1f4  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200137ec  0801a1f4  000337ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196b6  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ae  00000000  00000000  0004c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0004f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00050c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026639  00000000  00000000  00051f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f88  00000000  00000000  000785b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2f93  00000000  00000000  00090541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001734d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  00173528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800710c 	.word	0x0800710c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	0800710c 	.word	0x0800710c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_A>:
		}
	}
}

//Matthew's Addition
void LCD_A(uint16_t x0, uint16_t y0) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000504:	230f      	movs	r3, #15
 8000506:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e030      	b.n	8000570 <LCD_A+0x7c>
		for(int dx = 0; dx <=width; dx++){
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	e026      	b.n	8000562 <LCD_A+0x6e>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || (dy >= 6 && dy <= 9))) {
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dd0b      	ble.n	8000532 <LCD_A+0x3e>
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2b0b      	cmp	r3, #11
 800051e:	dc08      	bgt.n	8000532 <LCD_A+0x3e>
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dd05      	ble.n	8000532 <LCD_A+0x3e>
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b05      	cmp	r3, #5
 800052a:	dd17      	ble.n	800055c <LCD_A+0x68>
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	2b09      	cmp	r3, #9
 8000530:	dc14      	bgt.n	800055c <LCD_A+0x68>
				int y = y0 + dy;
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	69fa      	ldr	r2, [r7, #28]
 8000536:	4413      	add	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <LCD_A+0x90>)
 8000544:	7818      	ldrb	r0, [r3, #0]
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4613      	mov	r3, r2
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	4619      	mov	r1, r3
 8000558:	f001 ff70 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	3301      	adds	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	429a      	cmp	r2, r3
 8000568:	ddd4      	ble.n	8000514 <LCD_A+0x20>
	for(int dy = 0; dy <= width; dy++){
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	429a      	cmp	r2, r3
 8000576:	ddca      	ble.n	800050e <LCD_A+0x1a>
			}
		}
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <LCD_B>:

void LCD_B(uint16_t x0, uint16_t y0) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	80fb      	strh	r3, [r7, #6]
 8000594:	4613      	mov	r3, r2
 8000596:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000598:	230f      	movs	r3, #15
 800059a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	e04b      	b.n	800063a <LCD_B+0xb2>
		for(int dx = 0; dx <=width; dx++){
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e041      	b.n	800062c <LCD_B+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	dd26      	ble.n	80005fc <LCD_B+0x74>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	dd05      	ble.n	80005c0 <LCD_B+0x38>
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b09      	cmp	r3, #9
 80005b8:	dc02      	bgt.n	80005c0 <LCD_B+0x38>
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b0b      	cmp	r3, #11
 80005be:	dd1d      	ble.n	80005fc <LCD_B+0x74>
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc02      	bgt.n	80005cc <LCD_B+0x44>
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	2b0b      	cmp	r3, #11
 80005ca:	dd17      	ble.n	80005fc <LCD_B+0x74>
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	dd02      	ble.n	80005d8 <LCD_B+0x50>
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b0b      	cmp	r3, #11
 80005d6:	dd11      	ble.n	80005fc <LCD_B+0x74>
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	2b0b      	cmp	r3, #11
 80005dc:	dd05      	ble.n	80005ea <LCD_B+0x62>
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	dd02      	ble.n	80005ea <LCD_B+0x62>
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	dd08      	ble.n	80005fc <LCD_B+0x74>
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dd1a      	ble.n	8000626 <LCD_B+0x9e>
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	2b08      	cmp	r3, #8
 80005f4:	dd17      	ble.n	8000626 <LCD_B+0x9e>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b0c      	cmp	r3, #12
 80005fa:	dc14      	bgt.n	8000626 <LCD_B+0x9e>
				int y = y0 + dy;
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <LCD_B+0xc4>)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4613      	mov	r3, r2
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	4619      	mov	r1, r3
 8000622:	f001 ff0b 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	3301      	adds	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	429a      	cmp	r2, r3
 8000632:	ddb9      	ble.n	80005a8 <LCD_B+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	429a      	cmp	r2, r3
 8000640:	ddaf      	ble.n	80005a2 <LCD_B+0x1a>
			}
		}
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <LCD_C>:

void LCD_C(uint16_t x0, uint16_t y0) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000660:	230f      	movs	r3, #15
 8000662:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	e02a      	b.n	80006c0 <LCD_C+0x70>
		for(int dx = 0; dx <=width; dx++){
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	e020      	b.n	80006b2 <LCD_C+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dd05      	ble.n	8000682 <LCD_C+0x32>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b03      	cmp	r3, #3
 800067a:	dd02      	ble.n	8000682 <LCD_C+0x32>
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	dd14      	ble.n	80006ac <LCD_C+0x5c>
				int y = y0 + dy;
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	4413      	add	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <LCD_C+0x84>)
 8000694:	7818      	ldrb	r0, [r3, #0]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4613      	mov	r3, r2
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	461a      	mov	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 fec8 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	ddda      	ble.n	8000670 <LCD_C+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	ddd0      	ble.n	800066a <LCD_C+0x1a>
			}
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000

080006d8 <LCD_D>:

void LCD_D(uint16_t x0, uint16_t y0) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	e039      	b.n	8000766 <LCD_D+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	e02f      	b.n	8000758 <LCD_D+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dd14      	ble.n	8000728 <LCD_D+0x50>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2b03      	cmp	r3, #3
 8000702:	dc02      	bgt.n	800070a <LCD_D+0x32>
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	2b0b      	cmp	r3, #11
 8000708:	dd0e      	ble.n	8000728 <LCD_D+0x50>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dd02      	ble.n	8000716 <LCD_D+0x3e>
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2b0b      	cmp	r3, #11
 8000714:	dd08      	ble.n	8000728 <LCD_D+0x50>
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b0b      	cmp	r3, #11
 800071a:	dd1a      	ble.n	8000752 <LCD_D+0x7a>
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b03      	cmp	r3, #3
 8000720:	dd17      	ble.n	8000752 <LCD_D+0x7a>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0b      	cmp	r3, #11
 8000726:	dc14      	bgt.n	8000752 <LCD_D+0x7a>
				int y = y0 + dy;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4413      	add	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <LCD_D+0xa0>)
 800073a:	7818      	ldrb	r0, [r3, #0]
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4613      	mov	r3, r2
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	4619      	mov	r1, r3
 800074e:	f001 fe75 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3301      	adds	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	429a      	cmp	r2, r3
 800075e:	ddcb      	ble.n	80006f8 <LCD_D+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3301      	adds	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	429a      	cmp	r2, r3
 800076c:	ddc1      	ble.n	80006f2 <LCD_D+0x1a>
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000

0800077c <LCD_E>:

void LCD_E(uint16_t x0, uint16_t y0) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4613      	mov	r3, r2
 800078a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e036      	b.n	8000804 <LCD_E+0x88>
		for(int dx = 0; dx <=width; dx++){
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e02c      	b.n	80007f6 <LCD_E+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dd11      	ble.n	80007c6 <LCD_E+0x4a>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd0e      	ble.n	80007c6 <LCD_E+0x4a>
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d00b      	beq.n	80007c6 <LCD_E+0x4a>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d008      	beq.n	80007c6 <LCD_E+0x4a>
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d005      	beq.n	80007c6 <LCD_E+0x4a>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d002      	beq.n	80007c6 <LCD_E+0x4a>
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dd14      	ble.n	80007f0 <LCD_E+0x74>
				int y = y0 + dy;
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <LCD_E+0x9c>)
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fe26 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	ddce      	ble.n	800079c <LCD_E+0x20>
	for(int dy = 0; dy <= width; dy++){
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3301      	adds	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	ddc4      	ble.n	8000796 <LCD_E+0x1a>
			}
		}
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000

0800081c <LCD_F>:

void LCD_F(uint16_t x0, uint16_t y0) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800082c:	230f      	movs	r3, #15
 800082e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	e030      	b.n	8000898 <LCD_F+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	e026      	b.n	800088a <LCD_F+0x6e>
			if ((dx <= 3) || (dy <= 3) || (dy >= 6 && dy <= 9 && dx <= 11)) {
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dd0b      	ble.n	800085a <LCD_F+0x3e>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b03      	cmp	r3, #3
 8000846:	dd08      	ble.n	800085a <LCD_F+0x3e>
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b05      	cmp	r3, #5
 800084c:	dd1a      	ble.n	8000884 <LCD_F+0x68>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b09      	cmp	r3, #9
 8000852:	dc17      	bgt.n	8000884 <LCD_F+0x68>
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	2b0b      	cmp	r3, #11
 8000858:	dc14      	bgt.n	8000884 <LCD_F+0x68>
				int y = y0 + dy;
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <LCD_F+0x90>)
 800086c:	7818      	ldrb	r0, [r3, #0]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4613      	mov	r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	4619      	mov	r1, r3
 8000880:	f001 fddc 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	429a      	cmp	r2, r3
 8000890:	ddd4      	ble.n	800083c <LCD_F+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	ddca      	ble.n	8000836 <LCD_F+0x1a>
			}
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <LCD_G>:

void LCD_G(uint16_t x0, uint16_t y0) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80008c0:	230f      	movs	r3, #15
 80008c2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	e039      	b.n	800093e <LCD_G+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	e02f      	b.n	8000930 <LCD_G+0x80>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12) || (dy >= 6 && dx >= 12) || (dy >= 6 && dy <= 9 && dx >= 5)) {
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	dd14      	ble.n	8000900 <LCD_G+0x50>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dd11      	ble.n	8000900 <LCD_G+0x50>
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	dc0e      	bgt.n	8000900 <LCD_G+0x50>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	dd02      	ble.n	80008ee <LCD_G+0x3e>
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b0b      	cmp	r3, #11
 80008ec:	dc08      	bgt.n	8000900 <LCD_G+0x50>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	dd1a      	ble.n	800092a <LCD_G+0x7a>
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2b09      	cmp	r3, #9
 80008f8:	dc17      	bgt.n	800092a <LCD_G+0x7a>
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	dd14      	ble.n	800092a <LCD_G+0x7a>
				int y = y0 + dy;
 8000900:	88bb      	ldrh	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4413      	add	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <LCD_G+0xa0>)
 8000912:	7818      	ldrb	r0, [r3, #0]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4613      	mov	r3, r2
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f001 fd89 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3301      	adds	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	429a      	cmp	r2, r3
 8000936:	ddcb      	ble.n	80008d0 <LCD_G+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	429a      	cmp	r2, r3
 8000944:	ddc1      	ble.n	80008ca <LCD_G+0x1a>
			}
		}
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000

08000954 <LCD_H>:

void LCD_H(uint16_t x0, uint16_t y0) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000964:	230f      	movs	r3, #15
 8000966:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e033      	b.n	80009d6 <LCD_H+0x82>
		for(int dx = 0; dx <=width; dx++){
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	e029      	b.n	80009c8 <LCD_H+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b03      	cmp	r3, #3
 8000978:	dd0e      	ble.n	8000998 <LCD_H+0x44>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b0b      	cmp	r3, #11
 800097e:	dc0b      	bgt.n	8000998 <LCD_H+0x44>
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b06      	cmp	r3, #6
 8000984:	d008      	beq.n	8000998 <LCD_H+0x44>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d005      	beq.n	8000998 <LCD_H+0x44>
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b08      	cmp	r3, #8
 8000990:	d002      	beq.n	8000998 <LCD_H+0x44>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b09      	cmp	r3, #9
 8000996:	d114      	bne.n	80009c2 <LCD_H+0x6e>
				int y = y0 + dy;
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4413      	add	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <LCD_H+0x94>)
 80009aa:	7818      	ldrb	r0, [r3, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4613      	mov	r3, r2
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f001 fd3d 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	3301      	adds	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	ddd1      	ble.n	8000974 <LCD_H+0x20>
	for(int dy = 0; dy <= width; dy++){
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	3301      	adds	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	429a      	cmp	r2, r3
 80009dc:	ddc7      	ble.n	800096e <LCD_H+0x1a>
			}
		}
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000

080009ec <LCD_I>:

void LCD_I(uint16_t x0, uint16_t y0) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80009fc:	230f      	movs	r3, #15
 80009fe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e02d      	b.n	8000a62 <LCD_I+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	e023      	b.n	8000a54 <LCD_I+0x68>
			if ((dy <= 3) || (dy >= 12) || (dx >= 6 && dx <= 9)) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	dd08      	ble.n	8000a24 <LCD_I+0x38>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	2b0b      	cmp	r3, #11
 8000a16:	dc05      	bgt.n	8000a24 <LCD_I+0x38>
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	dd17      	ble.n	8000a4e <LCD_I+0x62>
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	dc14      	bgt.n	8000a4e <LCD_I+0x62>
				int y = y0 + dy;
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	4413      	add	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4413      	add	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <LCD_I+0x88>)
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f001 fcf7 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	ddd7      	ble.n	8000a0c <LCD_I+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	ddcd      	ble.n	8000a06 <LCD_I+0x1a>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000

08000a78 <LCD_J>:

void LCD_J(uint16_t x0, uint16_t y0) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e030      	b.n	8000af4 <LCD_J+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e026      	b.n	8000ae6 <LCD_J+0x6e>
			if ((dy <= 3) || (dx >= 6 && dx <= 9) || (dx <= 9 && dy >= 12)) {
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dd0b      	ble.n	8000ab6 <LCD_J+0x3e>
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	dd02      	ble.n	8000aaa <LCD_J+0x32>
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	dd05      	ble.n	8000ab6 <LCD_J+0x3e>
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	dc17      	bgt.n	8000ae0 <LCD_J+0x68>
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0b      	cmp	r3, #11
 8000ab4:	dd14      	ble.n	8000ae0 <LCD_J+0x68>
				int y = y0 + dy;
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4413      	add	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <LCD_J+0x90>)
 8000ac8:	7818      	ldrb	r0, [r3, #0]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f001 fcae 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	ddd4      	ble.n	8000a98 <LCD_J+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	ddca      	ble.n	8000a92 <LCD_J+0x1a>
			}
		}
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_K>:

void LCD_K(uint16_t x0, uint16_t y0) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	e054      	b.n	8000bd0 <LCD_K+0xc4>
		for(int dx = 0; dx <=width; dx++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	e04a      	b.n	8000bc2 <LCD_K+0xb6>
			if ((dx <= 3) || (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 11 && dy <= 3) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	dd2f      	ble.n	8000b92 <LCD_K+0x86>
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b0b      	cmp	r3, #11
 8000b36:	dd02      	ble.n	8000b3e <LCD_K+0x32>
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0b      	cmp	r3, #11
 8000b3c:	dc29      	bgt.n	8000b92 <LCD_K+0x86>
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	dd08      	ble.n	8000b56 <LCD_K+0x4a>
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2b0b      	cmp	r3, #11
 8000b48:	dc05      	bgt.n	8000b56 <LCD_K+0x4a>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	dd02      	ble.n	8000b56 <LCD_K+0x4a>
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dd1d      	ble.n	8000b92 <LCD_K+0x86>
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dd08      	ble.n	8000b6e <LCD_K+0x62>
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dc05      	bgt.n	8000b6e <LCD_K+0x62>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dd02      	ble.n	8000b6e <LCD_K+0x62>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	dd11      	ble.n	8000b92 <LCD_K+0x86>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b0a      	cmp	r3, #10
 8000b72:	dd02      	ble.n	8000b7a <LCD_K+0x6e>
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	dd0b      	ble.n	8000b92 <LCD_K+0x86>
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	dd1d      	ble.n	8000bbc <LCD_K+0xb0>
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2b0b      	cmp	r3, #11
 8000b84:	dc1a      	bgt.n	8000bbc <LCD_K+0xb0>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	dd17      	ble.n	8000bbc <LCD_K+0xb0>
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	dc14      	bgt.n	8000bbc <LCD_K+0xb0>
				int y = y0 + dy;
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	4413      	add	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <LCD_K+0xd8>)
 8000ba4:	7818      	ldrb	r0, [r3, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 fc40 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	ddb0      	ble.n	8000b2c <LCD_K+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dda6      	ble.n	8000b26 <LCD_K+0x1a>
			}
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <LCD_L>:

void LCD_L(uint16_t x0, uint16_t y0) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e027      	b.n	8000c52 <LCD_L+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	e01d      	b.n	8000c44 <LCD_L+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dd02      	ble.n	8000c14 <LCD_L+0x2c>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b0b      	cmp	r3, #11
 8000c12:	dd14      	ble.n	8000c3e <LCD_L+0x56>
				int y = y0 + dy;
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <LCD_L+0x7c>)
 8000c26:	7818      	ldrb	r0, [r3, #0]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f001 fbff 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dddd      	ble.n	8000c08 <LCD_L+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	ddd3      	ble.n	8000c02 <LCD_L+0x1a>
			}
		}
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000

08000c68 <LCD_M>:

void LCD_M(uint16_t x0, uint16_t y0) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4613      	mov	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	e04b      	b.n	8000d1a <LCD_M+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e041      	b.n	8000d0c <LCD_M+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	dd26      	ble.n	8000cdc <LCD_M+0x74>
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b0b      	cmp	r3, #11
 8000c92:	dc23      	bgt.n	8000cdc <LCD_M+0x74>
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	dd08      	ble.n	8000cac <LCD_M+0x44>
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	dc05      	bgt.n	8000cac <LCD_M+0x44>
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	dd02      	ble.n	8000cac <LCD_M+0x44>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	dd17      	ble.n	8000cdc <LCD_M+0x74>
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	dd08      	ble.n	8000cc4 <LCD_M+0x5c>
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	dc05      	bgt.n	8000cc4 <LCD_M+0x5c>
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	dd02      	ble.n	8000cc4 <LCD_M+0x5c>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	dd0b      	ble.n	8000cdc <LCD_M+0x74>
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	dd1d      	ble.n	8000d06 <LCD_M+0x9e>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	dc1a      	bgt.n	8000d06 <LCD_M+0x9e>
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dd17      	ble.n	8000d06 <LCD_M+0x9e>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	dc14      	bgt.n	8000d06 <LCD_M+0x9e>
				int y = y0 + dy;
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <LCD_M+0xc4>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f001 fb9b 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	ddb9      	ble.n	8000c88 <LCD_M+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	ddaf      	ble.n	8000c82 <LCD_M+0x1a>
			}
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000

08000d30 <LCD_N>:

void LCD_N(uint16_t x0, uint16_t y0) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	e04b      	b.n	8000de2 <LCD_N+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e041      	b.n	8000dd4 <LCD_N+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dd26      	ble.n	8000da4 <LCD_N+0x74>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b0b      	cmp	r3, #11
 8000d5a:	dc23      	bgt.n	8000da4 <LCD_N+0x74>
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	dd08      	ble.n	8000d74 <LCD_N+0x44>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	dc05      	bgt.n	8000d74 <LCD_N+0x44>
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	dd02      	ble.n	8000d74 <LCD_N+0x44>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	dd17      	ble.n	8000da4 <LCD_N+0x74>
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	dd08      	ble.n	8000d8c <LCD_N+0x5c>
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	dc05      	bgt.n	8000d8c <LCD_N+0x5c>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	dd02      	ble.n	8000d8c <LCD_N+0x5c>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	dd0b      	ble.n	8000da4 <LCD_N+0x74>
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	dd1d      	ble.n	8000dce <LCD_N+0x9e>
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b0c      	cmp	r3, #12
 8000d96:	dc1a      	bgt.n	8000dce <LCD_N+0x9e>
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	dd17      	ble.n	8000dce <LCD_N+0x9e>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	dc14      	bgt.n	8000dce <LCD_N+0x9e>
				int y = y0 + dy;
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4413      	add	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <LCD_N+0xc4>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f001 fb37 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	ddb9      	ble.n	8000d50 <LCD_N+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	3301      	adds	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	ddaf      	ble.n	8000d4a <LCD_N+0x1a>
			}
		}
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000

08000df8 <LCD_O>:

void LCD_O(uint16_t x0, uint16_t y0) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e02d      	b.n	8000e6e <LCD_O+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e023      	b.n	8000e60 <LCD_O+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dd08      	ble.n	8000e30 <LCD_O+0x38>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b0b      	cmp	r3, #11
 8000e22:	dc05      	bgt.n	8000e30 <LCD_O+0x38>
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	dd02      	ble.n	8000e30 <LCD_O+0x38>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2b0b      	cmp	r3, #11
 8000e2e:	dd14      	ble.n	8000e5a <LCD_O+0x62>
				int y = y0 + dy;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <LCD_O+0x88>)
 8000e42:	7818      	ldrb	r0, [r3, #0]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4613      	mov	r3, r2
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f001 faf1 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	ddd7      	ble.n	8000e18 <LCD_O+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	ddcd      	ble.n	8000e12 <LCD_O+0x1a>
			}
		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000

08000e84 <LCD_P>:

void LCD_P(uint16_t x0, uint16_t y0) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	80fb      	strh	r3, [r7, #6]
 8000e90:	4613      	mov	r3, r2
 8000e92:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e94:	230f      	movs	r3, #15
 8000e96:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e03c      	b.n	8000f18 <LCD_P+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	e032      	b.n	8000f0a <LCD_P+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	dd17      	ble.n	8000eda <LCD_P+0x56>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	dc02      	bgt.n	8000eb6 <LCD_P+0x32>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0b      	cmp	r3, #11
 8000eb4:	dd11      	ble.n	8000eda <LCD_P+0x56>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	dd05      	ble.n	8000ec8 <LCD_P+0x44>
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b09      	cmp	r3, #9
 8000ec0:	dc02      	bgt.n	8000ec8 <LCD_P+0x44>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b0b      	cmp	r3, #11
 8000ec6:	dd08      	ble.n	8000eda <LCD_P+0x56>
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b0b      	cmp	r3, #11
 8000ecc:	dd1a      	ble.n	8000f04 <LCD_P+0x80>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	dd17      	ble.n	8000f04 <LCD_P+0x80>
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	dc14      	bgt.n	8000f04 <LCD_P+0x80>
				int y = y0 + dy;
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <LCD_P+0xa8>)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f001 fa9c 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	ddc8      	ble.n	8000ea4 <LCD_P+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	ddbe      	ble.n	8000e9e <LCD_P+0x1a>
			}
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <LCD_Q>:

void LCD_Q(uint16_t x0, uint16_t y0) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000f40:	230f      	movs	r3, #15
 8000f42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	e039      	b.n	8000fbe <LCD_Q+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	e02f      	b.n	8000fb0 <LCD_Q+0x80>
			if ((dx <= 3)||(dx >= 12) || (dy <= 3) || (dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	dd14      	ble.n	8000f80 <LCD_Q+0x50>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b0b      	cmp	r3, #11
 8000f5a:	dc11      	bgt.n	8000f80 <LCD_Q+0x50>
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dd0e      	ble.n	8000f80 <LCD_Q+0x50>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	2b0b      	cmp	r3, #11
 8000f66:	dc0b      	bgt.n	8000f80 <LCD_Q+0x50>
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	dd1d      	ble.n	8000faa <LCD_Q+0x7a>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0b      	cmp	r3, #11
 8000f72:	dc1a      	bgt.n	8000faa <LCD_Q+0x7a>
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd17      	ble.n	8000faa <LCD_Q+0x7a>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	dc14      	bgt.n	8000faa <LCD_Q+0x7a>
				int y = y0 + dy;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4413      	add	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <LCD_Q+0xa0>)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4613      	mov	r3, r2
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 fa49 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	ddcb      	ble.n	8000f50 <LCD_Q+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	ddc1      	ble.n	8000f4a <LCD_Q+0x1a>
			}
		}
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <LCD_R>:

void LCD_R(uint16_t x0, uint16_t y0) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	e04e      	b.n	800108c <LCD_R+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e044      	b.n	800107e <LCD_R+0xaa>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))|| (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	dd29      	ble.n	800104e <LCD_R+0x7a>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	dc02      	bgt.n	8001006 <LCD_R+0x32>
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b0b      	cmp	r3, #11
 8001004:	dd23      	ble.n	800104e <LCD_R+0x7a>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2b05      	cmp	r3, #5
 800100a:	dd05      	ble.n	8001018 <LCD_R+0x44>
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b09      	cmp	r3, #9
 8001010:	dc02      	bgt.n	8001018 <LCD_R+0x44>
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b0b      	cmp	r3, #11
 8001016:	dd1a      	ble.n	800104e <LCD_R+0x7a>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b0b      	cmp	r3, #11
 800101c:	dd05      	ble.n	800102a <LCD_R+0x56>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2b02      	cmp	r3, #2
 8001022:	dd02      	ble.n	800102a <LCD_R+0x56>
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b06      	cmp	r3, #6
 8001028:	dd11      	ble.n	800104e <LCD_R+0x7a>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0b      	cmp	r3, #11
 800102e:	dd02      	ble.n	8001036 <LCD_R+0x62>
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	dc0b      	bgt.n	800104e <LCD_R+0x7a>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b07      	cmp	r3, #7
 800103a:	dd1d      	ble.n	8001078 <LCD_R+0xa4>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0b      	cmp	r3, #11
 8001040:	dc1a      	bgt.n	8001078 <LCD_R+0xa4>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2b07      	cmp	r3, #7
 8001046:	dd17      	ble.n	8001078 <LCD_R+0xa4>
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	dc14      	bgt.n	8001078 <LCD_R+0xa4>
				int y = y0 + dy;
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <LCD_R+0xcc>)
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4613      	mov	r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f001 f9e2 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	ddb6      	ble.n	8000ff4 <LCD_R+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	ddac      	ble.n	8000fee <LCD_R+0x1a>
			}
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <LCD_S>:

void LCD_S(uint16_t x0, uint16_t y0) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80010b4:	230f      	movs	r3, #15
 80010b6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	e03f      	b.n	800113e <LCD_S+0x9a>
		for(int dx = 0; dx <=width; dx++){
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e035      	b.n	8001130 <LCD_S+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	dc02      	bgt.n	80010d0 <LCD_S+0x2c>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	dd17      	ble.n	8001100 <LCD_S+0x5c>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0b      	cmp	r3, #11
 80010d4:	dd02      	ble.n	80010dc <LCD_S+0x38>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	dc11      	bgt.n	8001100 <LCD_S+0x5c>
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	dd0e      	ble.n	8001100 <LCD_S+0x5c>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d00b      	beq.n	8001100 <LCD_S+0x5c>
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d008      	beq.n	8001100 <LCD_S+0x5c>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d005      	beq.n	8001100 <LCD_S+0x5c>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	d002      	beq.n	8001100 <LCD_S+0x5c>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	dd14      	ble.n	800112a <LCD_S+0x86>
				int y = y0 + dy;
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4413      	add	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <LCD_S+0xac>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f001 f989 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	429a      	cmp	r2, r3
 8001136:	ddc5      	ble.n	80010c4 <LCD_S+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	ddbb      	ble.n	80010be <LCD_S+0x1a>
			}
		}
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000

08001154 <LCD_T>:

void LCD_T(uint16_t x0, uint16_t y0) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001164:	230f      	movs	r3, #15
 8001166:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	e02a      	b.n	80011c4 <LCD_T+0x70>
		for(int dx = 0; dx <=width; dx++){
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	e020      	b.n	80011b6 <LCD_T+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b03      	cmp	r3, #3
 8001178:	dd05      	ble.n	8001186 <LCD_T+0x32>
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b05      	cmp	r3, #5
 800117e:	dd17      	ble.n	80011b0 <LCD_T+0x5c>
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b09      	cmp	r3, #9
 8001184:	dc14      	bgt.n	80011b0 <LCD_T+0x5c>
				int y = y0 + dy;
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <LCD_T+0x84>)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4613      	mov	r3, r2
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 f946 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	ddda      	ble.n	8001174 <LCD_T+0x20>
	for(int dy = 0; dy <= width; dy++){
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	ddd0      	ble.n	800116e <LCD_T+0x1a>
			}
		}
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000

080011dc <LCD_U>:

void LCD_U(uint16_t x0, uint16_t y0) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e02a      	b.n	800124c <LCD_U+0x70>
		for(int dx = 0; dx <=width; dx++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e020      	b.n	800123e <LCD_U+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	dd05      	ble.n	800120e <LCD_U+0x32>
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0b      	cmp	r3, #11
 8001206:	dc02      	bgt.n	800120e <LCD_U+0x32>
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0b      	cmp	r3, #11
 800120c:	dd14      	ble.n	8001238 <LCD_U+0x5c>
				int y = y0 + dy;
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <LCD_U+0x84>)
 8001220:	7818      	ldrb	r0, [r3, #0]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4613      	mov	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4413      	add	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f001 f902 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	429a      	cmp	r2, r3
 8001244:	ddda      	ble.n	80011fc <LCD_U+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	ddd0      	ble.n	80011f6 <LCD_U+0x1a>
			}
		}
	}
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <LCD_V>:

void LCD_V(uint16_t x0, uint16_t y0) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001274:	230f      	movs	r3, #15
 8001276:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	e066      	b.n	800134c <LCD_V+0xe8>
		for(int dx = 0; dx <=width; dx++){
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	e05c      	b.n	800133e <LCD_V+0xda>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 6 && dx <= 9 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 2 && dx <= 5) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7) || (dy >= 4 && dy <= 7 && dx >= 10 && dx <= 13) || (dy >= 8 && dy <= 11 && dx >= 8 && dx <= 11) ) {
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b03      	cmp	r3, #3
 8001288:	dc02      	bgt.n	8001290 <LCD_V+0x2c>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b03      	cmp	r3, #3
 800128e:	dd3e      	ble.n	800130e <LCD_V+0xaa>
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b0b      	cmp	r3, #11
 8001294:	dd02      	ble.n	800129c <LCD_V+0x38>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b03      	cmp	r3, #3
 800129a:	dd38      	ble.n	800130e <LCD_V+0xaa>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	dd05      	ble.n	80012ae <LCD_V+0x4a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dc02      	bgt.n	80012ae <LCD_V+0x4a>
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0b      	cmp	r3, #11
 80012ac:	dc2f      	bgt.n	800130e <LCD_V+0xaa>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	dd08      	ble.n	80012c6 <LCD_V+0x62>
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	dc05      	bgt.n	80012c6 <LCD_V+0x62>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	dd02      	ble.n	80012c6 <LCD_V+0x62>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	dd23      	ble.n	800130e <LCD_V+0xaa>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	dd08      	ble.n	80012de <LCD_V+0x7a>
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0b      	cmp	r3, #11
 80012d0:	dc05      	bgt.n	80012de <LCD_V+0x7a>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	dd02      	ble.n	80012de <LCD_V+0x7a>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	dd17      	ble.n	800130e <LCD_V+0xaa>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	dd08      	ble.n	80012f6 <LCD_V+0x92>
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	dc05      	bgt.n	80012f6 <LCD_V+0x92>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	dd02      	ble.n	80012f6 <LCD_V+0x92>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b0d      	cmp	r3, #13
 80012f4:	dd0b      	ble.n	800130e <LCD_V+0xaa>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dd1d      	ble.n	8001338 <LCD_V+0xd4>
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0b      	cmp	r3, #11
 8001300:	dc1a      	bgt.n	8001338 <LCD_V+0xd4>
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b07      	cmp	r3, #7
 8001306:	dd17      	ble.n	8001338 <LCD_V+0xd4>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0b      	cmp	r3, #11
 800130c:	dc14      	bgt.n	8001338 <LCD_V+0xd4>
				int y = y0 + dy;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <LCD_V+0xfc>)
 8001320:	7818      	ldrb	r0, [r3, #0]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4613      	mov	r3, r2
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f001 f882 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3301      	adds	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	429a      	cmp	r2, r3
 8001344:	dd9e      	ble.n	8001284 <LCD_V+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	dd94      	ble.n	800127e <LCD_V+0x1a>
			}
		}
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <LCD_W>:

void LCD_W(uint16_t x0, uint16_t y0) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001374:	230f      	movs	r3, #15
 8001376:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e081      	b.n	8001482 <LCD_W+0x11e>
		for(int dx = 0; dx <=width; dx++){
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e077      	b.n	8001474 <LCD_W+0x110>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dy >= 4 && dy <= 7 && dx >= 1 && dx <= 4) || (dy >= 8 && dy <= 11 && dx >= 2 && dx <= 5)  || (dy >= 12 && dy <= 15 && dx >= 3 && dx <= 6)|| (dy >= 4 && dy <= 7 && dx >= 11 && dx <= 14) || (dy >= 8 && dy <= 11 && dx >= 10 && dx <= 13) || (dy >= 12 && dy <= 15 && dx >= 9 && dx <= 12) || (dx >= 6 && dx <= 9 && dy >= 6 && dy <= 11)) {
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b03      	cmp	r3, #3
 8001388:	dc02      	bgt.n	8001390 <LCD_W+0x2c>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b03      	cmp	r3, #3
 800138e:	dd59      	ble.n	8001444 <LCD_W+0xe0>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0b      	cmp	r3, #11
 8001394:	dd02      	ble.n	800139c <LCD_W+0x38>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b03      	cmp	r3, #3
 800139a:	dd53      	ble.n	8001444 <LCD_W+0xe0>
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	dd08      	ble.n	80013b4 <LCD_W+0x50>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	dc05      	bgt.n	80013b4 <LCD_W+0x50>
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd02      	ble.n	80013b4 <LCD_W+0x50>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	dd47      	ble.n	8001444 <LCD_W+0xe0>
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	dd08      	ble.n	80013cc <LCD_W+0x68>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	dc05      	bgt.n	80013cc <LCD_W+0x68>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	dd02      	ble.n	80013cc <LCD_W+0x68>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	dd3b      	ble.n	8001444 <LCD_W+0xe0>
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0b      	cmp	r3, #11
 80013d0:	dd08      	ble.n	80013e4 <LCD_W+0x80>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	dc05      	bgt.n	80013e4 <LCD_W+0x80>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dd02      	ble.n	80013e4 <LCD_W+0x80>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	dd2f      	ble.n	8001444 <LCD_W+0xe0>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	dd08      	ble.n	80013fc <LCD_W+0x98>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	dc05      	bgt.n	80013fc <LCD_W+0x98>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	dd02      	ble.n	80013fc <LCD_W+0x98>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b0e      	cmp	r3, #14
 80013fa:	dd23      	ble.n	8001444 <LCD_W+0xe0>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	dd08      	ble.n	8001414 <LCD_W+0xb0>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b0b      	cmp	r3, #11
 8001406:	dc05      	bgt.n	8001414 <LCD_W+0xb0>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b09      	cmp	r3, #9
 800140c:	dd02      	ble.n	8001414 <LCD_W+0xb0>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0d      	cmp	r3, #13
 8001412:	dd17      	ble.n	8001444 <LCD_W+0xe0>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0b      	cmp	r3, #11
 8001418:	dd08      	ble.n	800142c <LCD_W+0xc8>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	dc05      	bgt.n	800142c <LCD_W+0xc8>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b08      	cmp	r3, #8
 8001424:	dd02      	ble.n	800142c <LCD_W+0xc8>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	dd0b      	ble.n	8001444 <LCD_W+0xe0>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b05      	cmp	r3, #5
 8001430:	dd1d      	ble.n	800146e <LCD_W+0x10a>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b09      	cmp	r3, #9
 8001436:	dc1a      	bgt.n	800146e <LCD_W+0x10a>
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b05      	cmp	r3, #5
 800143c:	dd17      	ble.n	800146e <LCD_W+0x10a>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b0b      	cmp	r3, #11
 8001442:	dc14      	bgt.n	800146e <LCD_W+0x10a>
				int y = y0 + dy;
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <LCD_W+0x134>)
 8001456:	7818      	ldrb	r0, [r3, #0]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4613      	mov	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f000 ffe7 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3301      	adds	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	429a      	cmp	r2, r3
 800147a:	dd83      	ble.n	8001384 <LCD_W+0x20>
	for(int dy = 0; dy <= width; dy++){
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	429a      	cmp	r2, r3
 8001488:	f77f af79 	ble.w	800137e <LCD_W+0x1a>
			}
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000

0800149c <LCD_X>:

void LCD_X(uint16_t x0, uint16_t y0) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80014ac:	230f      	movs	r3, #15
 80014ae:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e045      	b.n	8001542 <LCD_X+0xa6>
		for(int dx = 0; dx <=width; dx++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e03b      	b.n	8001534 <LCD_X+0x98>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx <= 3 && dy >= 12) || (dx >= 12 && dy >= 12) || (dy >= 4 && dy <= 11 && dx >= 4 && dx <= 11)) {
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	dc02      	bgt.n	80014c8 <LCD_X+0x2c>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	dd1d      	ble.n	8001504 <LCD_X+0x68>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0b      	cmp	r3, #11
 80014cc:	dd02      	ble.n	80014d4 <LCD_X+0x38>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	dd17      	ble.n	8001504 <LCD_X+0x68>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	dc02      	bgt.n	80014e0 <LCD_X+0x44>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	2b0b      	cmp	r3, #11
 80014de:	dc11      	bgt.n	8001504 <LCD_X+0x68>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0b      	cmp	r3, #11
 80014e4:	dd02      	ble.n	80014ec <LCD_X+0x50>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b0b      	cmp	r3, #11
 80014ea:	dc0b      	bgt.n	8001504 <LCD_X+0x68>
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	dd1d      	ble.n	800152e <LCD_X+0x92>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b0b      	cmp	r3, #11
 80014f6:	dc1a      	bgt.n	800152e <LCD_X+0x92>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dd17      	ble.n	800152e <LCD_X+0x92>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0b      	cmp	r3, #11
 8001502:	dc14      	bgt.n	800152e <LCD_X+0x92>
				int y = y0 + dy;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <LCD_X+0xb8>)
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f000 ff87 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	3301      	adds	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	ddbf      	ble.n	80014bc <LCD_X+0x20>
	for(int dy = 0; dy <= width; dy++){
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	429a      	cmp	r2, r3
 8001548:	ddb5      	ble.n	80014b6 <LCD_X+0x1a>
			}
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000

08001558 <LCD_Y>:

void LCD_Y(uint16_t x0, uint16_t y0) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001568:	230f      	movs	r3, #15
 800156a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e04e      	b.n	8001610 <LCD_Y+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e044      	b.n	8001602 <LCD_Y+0xaa>
			if ((dx >= 6 && dx <= 9 && dy >= 8) || (dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b05      	cmp	r3, #5
 800157c:	dd05      	ble.n	800158a <LCD_Y+0x32>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b09      	cmp	r3, #9
 8001582:	dc02      	bgt.n	800158a <LCD_Y+0x32>
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b07      	cmp	r3, #7
 8001588:	dc23      	bgt.n	80015d2 <LCD_Y+0x7a>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b03      	cmp	r3, #3
 800158e:	dc02      	bgt.n	8001596 <LCD_Y+0x3e>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b03      	cmp	r3, #3
 8001594:	dd1d      	ble.n	80015d2 <LCD_Y+0x7a>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	dd02      	ble.n	80015a2 <LCD_Y+0x4a>
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	dd17      	ble.n	80015d2 <LCD_Y+0x7a>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	dd08      	ble.n	80015ba <LCD_Y+0x62>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	dc05      	bgt.n	80015ba <LCD_Y+0x62>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	dd02      	ble.n	80015ba <LCD_Y+0x62>
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	dd0b      	ble.n	80015d2 <LCD_Y+0x7a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	dd1d      	ble.n	80015fc <LCD_Y+0xa4>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	dc1a      	bgt.n	80015fc <LCD_Y+0xa4>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	dd17      	ble.n	80015fc <LCD_Y+0xa4>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	dc14      	bgt.n	80015fc <LCD_Y+0xa4>
				int y = y0 + dy;
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <LCD_Y+0xcc>)
 80015e4:	7818      	ldrb	r0, [r3, #0]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f000 ff20 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	429a      	cmp	r2, r3
 8001608:	ddb6      	ble.n	8001578 <LCD_Y+0x20>
	for(int dy = 0; dy <= width; dy++){
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	ddac      	ble.n	8001572 <LCD_Y+0x1a>
			}
		}
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000

08001628 <LCD_Z>:

void LCD_Z(uint16_t x0, uint16_t y0) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	4613      	mov	r3, r2
 8001636:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001638:	230f      	movs	r3, #15
 800163a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	e03f      	b.n	80016c2 <LCD_Z+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e035      	b.n	80016b4 <LCD_Z+0x8c>
			if (dy <= 3 || dy >= 12 || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b03      	cmp	r3, #3
 800164c:	dd1a      	ble.n	8001684 <LCD_Z+0x5c>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b0b      	cmp	r3, #11
 8001652:	dc17      	bgt.n	8001684 <LCD_Z+0x5c>
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b03      	cmp	r3, #3
 8001658:	dd08      	ble.n	800166c <LCD_Z+0x44>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b07      	cmp	r3, #7
 800165e:	dc05      	bgt.n	800166c <LCD_Z+0x44>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b07      	cmp	r3, #7
 8001664:	dd02      	ble.n	800166c <LCD_Z+0x44>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0b      	cmp	r3, #11
 800166a:	dd0b      	ble.n	8001684 <LCD_Z+0x5c>
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b07      	cmp	r3, #7
 8001670:	dd1d      	ble.n	80016ae <LCD_Z+0x86>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b0b      	cmp	r3, #11
 8001676:	dc1a      	bgt.n	80016ae <LCD_Z+0x86>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b03      	cmp	r3, #3
 800167c:	dd17      	ble.n	80016ae <LCD_Z+0x86>
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b07      	cmp	r3, #7
 8001682:	dc14      	bgt.n	80016ae <LCD_Z+0x86>
				int y = y0 + dy;
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_Z+0xac>)
 8001696:	7818      	ldrb	r0, [r3, #0]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f000 fec7 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	ddc5      	ble.n	8001648 <LCD_Z+0x20>
	for(int dy = 0; dy <= width; dy++){
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	ddbb      	ble.n	8001642 <LCD_Z+0x1a>
			}
		}
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000

080016d8 <LCD_0>:

void LCD_0(uint16_t x0, uint16_t y0) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80016e8:	230f      	movs	r3, #15
 80016ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e02d      	b.n	800174e <LCD_0+0x76>
		for(int dx = 0; dx <=width; dx++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e023      	b.n	8001740 <LCD_0+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	dd08      	ble.n	8001710 <LCD_0+0x38>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0b      	cmp	r3, #11
 8001702:	dc05      	bgt.n	8001710 <LCD_0+0x38>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dd02      	ble.n	8001710 <LCD_0+0x38>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0b      	cmp	r3, #11
 800170e:	dd14      	ble.n	800173a <LCD_0+0x62>
				int y = y0 + dy;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <LCD_0+0x88>)
 8001722:	7818      	ldrb	r0, [r3, #0]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f000 fe81 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	429a      	cmp	r2, r3
 8001746:	ddd7      	ble.n	80016f8 <LCD_0+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	429a      	cmp	r2, r3
 8001754:	ddcd      	ble.n	80016f2 <LCD_0+0x1a>
			}
		}
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000

08001764 <LCD_1>:

void LCD_1(uint16_t x0, uint16_t y0) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001774:	230f      	movs	r3, #15
 8001776:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e027      	b.n	80017ce <LCD_1+0x6a>
		for(int dx = 0; dx <=width; dx++){
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e01d      	b.n	80017c0 <LCD_1+0x5c>
			if (dx >= 6 && dx <= 9) {
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b05      	cmp	r3, #5
 8001788:	dd17      	ble.n	80017ba <LCD_1+0x56>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b09      	cmp	r3, #9
 800178e:	dc14      	bgt.n	80017ba <LCD_1+0x56>
				int y = y0 + dy;
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <LCD_1+0x7c>)
 80017a2:	7818      	ldrb	r0, [r3, #0]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f000 fe41 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	3301      	adds	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dddd      	ble.n	8001784 <LCD_1+0x20>
	for(int dy = 0; dy <= width; dy++){
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	ddd3      	ble.n	800177e <LCD_1+0x1a>
			}
		}
	}
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000

080017e4 <LCD_2>:

void LCD_2(uint16_t x0, uint16_t y0) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80017f4:	230f      	movs	r3, #15
 80017f6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e039      	b.n	8001872 <LCD_2+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	e02f      	b.n	8001864 <LCD_2+0x80>
			if (dy <= 3 || dy >= 12|| (dx >= 12 && dy <= 5) || (dx <= 3 && dy >= 10) || (dy >= 6 && dy <= 9)) {
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b03      	cmp	r3, #3
 8001808:	dd14      	ble.n	8001834 <LCD_2+0x50>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b0b      	cmp	r3, #11
 800180e:	dc11      	bgt.n	8001834 <LCD_2+0x50>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0b      	cmp	r3, #11
 8001814:	dd02      	ble.n	800181c <LCD_2+0x38>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b05      	cmp	r3, #5
 800181a:	dd0b      	ble.n	8001834 <LCD_2+0x50>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b03      	cmp	r3, #3
 8001820:	dc02      	bgt.n	8001828 <LCD_2+0x44>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b09      	cmp	r3, #9
 8001826:	dc05      	bgt.n	8001834 <LCD_2+0x50>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b05      	cmp	r3, #5
 800182c:	dd17      	ble.n	800185e <LCD_2+0x7a>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b09      	cmp	r3, #9
 8001832:	dc14      	bgt.n	800185e <LCD_2+0x7a>
				int y = y0 + dy;
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <LCD_2+0xa0>)
 8001846:	7818      	ldrb	r0, [r3, #0]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f000 fdef 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	3301      	adds	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	429a      	cmp	r2, r3
 800186a:	ddcb      	ble.n	8001804 <LCD_2+0x20>
	for(int dy = 0; dy <= width; dy++){
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	3301      	adds	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	ddc1      	ble.n	80017fe <LCD_2+0x1a>
			}
		}
	}
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000

08001888 <LCD_3>:

void LCD_3(uint16_t x0, uint16_t y0) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001898:	230f      	movs	r3, #15
 800189a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	e030      	b.n	8001904 <LCD_3+0x7c>
		for(int dx = 0; dx <=width; dx++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e026      	b.n	80018f6 <LCD_3+0x6e>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12)) {
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	dd0b      	ble.n	80018c6 <LCD_3+0x3e>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	dc08      	bgt.n	80018c6 <LCD_3+0x3e>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	dd02      	ble.n	80018c0 <LCD_3+0x38>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	dd02      	ble.n	80018c6 <LCD_3+0x3e>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0b      	cmp	r3, #11
 80018c4:	dd14      	ble.n	80018f0 <LCD_3+0x68>
				int y = y0 + dy;
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <LCD_3+0x90>)
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f000 fda6 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	ddd4      	ble.n	80018a8 <LCD_3+0x20>
	for(int dy = 0; dy <= width; dy++){
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	ddca      	ble.n	80018a2 <LCD_3+0x1a>
			}
		}
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <LCD_4>:

void LCD_4(uint16_t x0, uint16_t y0) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800192c:	230f      	movs	r3, #15
 800192e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e033      	b.n	800199e <LCD_4+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e029      	b.n	8001990 <LCD_4+0x74>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 10 && dx <= 13)) {
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b03      	cmp	r3, #3
 8001940:	dc02      	bgt.n	8001948 <LCD_4+0x2c>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b09      	cmp	r3, #9
 8001946:	dd0b      	ble.n	8001960 <LCD_4+0x44>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b05      	cmp	r3, #5
 800194c:	dd02      	ble.n	8001954 <LCD_4+0x38>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b09      	cmp	r3, #9
 8001952:	dd05      	ble.n	8001960 <LCD_4+0x44>
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b09      	cmp	r3, #9
 8001958:	dd17      	ble.n	800198a <LCD_4+0x6e>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0d      	cmp	r3, #13
 800195e:	dc14      	bgt.n	800198a <LCD_4+0x6e>
				int y = y0 + dy;
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <LCD_4+0x94>)
 8001972:	7818      	ldrb	r0, [r3, #0]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f000 fd59 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	3301      	adds	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	ddd1      	ble.n	800193c <LCD_4+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	ddc7      	ble.n	8001936 <LCD_4+0x1a>
			}
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000

080019b4 <LCD_5>:

void LCD_5(uint16_t x0, uint16_t y0) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80019c4:	230f      	movs	r3, #15
 80019c6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e039      	b.n	8001a42 <LCD_5+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	e02f      	b.n	8001a34 <LCD_5+0x80>
			if (dy <= 3 || dy >= 12|| (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6) || (dx <= 3 && dy <= 9)) {
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	dd14      	ble.n	8001a04 <LCD_5+0x50>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	2b0b      	cmp	r3, #11
 80019de:	dc11      	bgt.n	8001a04 <LCD_5+0x50>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	dd02      	ble.n	80019ec <LCD_5+0x38>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	dd0b      	ble.n	8001a04 <LCD_5+0x50>
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0b      	cmp	r3, #11
 80019f0:	dd02      	ble.n	80019f8 <LCD_5+0x44>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	dc05      	bgt.n	8001a04 <LCD_5+0x50>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	dc17      	bgt.n	8001a2e <LCD_5+0x7a>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	dc14      	bgt.n	8001a2e <LCD_5+0x7a>
				int y = y0 + dy;
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <LCD_5+0xa0>)
 8001a16:	7818      	ldrb	r0, [r3, #0]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f000 fd07 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	ddcb      	ble.n	80019d4 <LCD_5+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	ddc1      	ble.n	80019ce <LCD_5+0x1a>
			}
		}
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000

08001a58 <LCD_6>:

void LCD_6(uint16_t x0, uint16_t y0) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	80fb      	strh	r3, [r7, #6]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e036      	b.n	8001ae0 <LCD_6+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	e02c      	b.n	8001ad2 <LCD_6+0x7a>
			if (dy <= 3 || dx <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6)) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	dd11      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	dd0e      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	dc0b      	bgt.n	8001aa2 <LCD_6+0x4a>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	dd02      	ble.n	8001a96 <LCD_6+0x3e>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	dd05      	ble.n	8001aa2 <LCD_6+0x4a>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	dd17      	ble.n	8001acc <LCD_6+0x74>
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	dd14      	ble.n	8001acc <LCD_6+0x74>
				int y = y0 + dy;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <LCD_6+0x9c>)
 8001ab4:	7818      	ldrb	r0, [r3, #0]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f000 fcb8 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	ddce      	ble.n	8001a78 <LCD_6+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	ddc4      	ble.n	8001a72 <LCD_6+0x1a>
			}
		}
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <LCD_7>:

void LCD_7(uint16_t x0, uint16_t y0) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	80fb      	strh	r3, [r7, #6]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e042      	b.n	8001b98 <LCD_7+0xa0>
		for(int dx = 0; dx <=width; dx++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e038      	b.n	8001b8a <LCD_7+0x92>
			if ((dy <= 3) || (dx <= 3 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	dd1d      	ble.n	8001b5a <LCD_7+0x62>
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	dc02      	bgt.n	8001b2a <LCD_7+0x32>
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0b      	cmp	r3, #11
 8001b28:	dc17      	bgt.n	8001b5a <LCD_7+0x62>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	dd08      	ble.n	8001b42 <LCD_7+0x4a>
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	dc05      	bgt.n	8001b42 <LCD_7+0x4a>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b07      	cmp	r3, #7
 8001b3a:	dd02      	ble.n	8001b42 <LCD_7+0x4a>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0b      	cmp	r3, #11
 8001b40:	dd0b      	ble.n	8001b5a <LCD_7+0x62>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	dd1d      	ble.n	8001b84 <LCD_7+0x8c>
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0b      	cmp	r3, #11
 8001b4c:	dc1a      	bgt.n	8001b84 <LCD_7+0x8c>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	dd17      	ble.n	8001b84 <LCD_7+0x8c>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	dc14      	bgt.n	8001b84 <LCD_7+0x8c>
				int y = y0 + dy;
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <LCD_7+0xb4>)
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f000 fc5c 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	ddc2      	ble.n	8001b18 <LCD_7+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	ddb8      	ble.n	8001b12 <LCD_7+0x1a>
			}
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <LCD_8>:

void LCD_8(uint16_t x0, uint16_t y0) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e033      	b.n	8001c32 <LCD_8+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	e029      	b.n	8001c24 <LCD_8+0x74>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12) || (dx <= 3)) {
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dd0e      	ble.n	8001bf4 <LCD_8+0x44>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	dc0b      	bgt.n	8001bf4 <LCD_8+0x44>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	dd02      	ble.n	8001be8 <LCD_8+0x38>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	dd05      	ble.n	8001bf4 <LCD_8+0x44>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0b      	cmp	r3, #11
 8001bec:	dc02      	bgt.n	8001bf4 <LCD_8+0x44>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	dc14      	bgt.n	8001c1e <LCD_8+0x6e>
				int y = y0 + dy;
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <LCD_8+0x94>)
 8001c06:	7818      	ldrb	r0, [r3, #0]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f000 fc0f 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	ddd1      	ble.n	8001bd0 <LCD_8+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	ddc7      	ble.n	8001bca <LCD_8+0x1a>
			}
		}
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000

08001c48 <LCD_9>:

void LCD_9(uint16_t x0, uint16_t y0) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e036      	b.n	8001cd0 <LCD_9+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	e02c      	b.n	8001cc2 <LCD_9+0x7a>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 12) || (dy <= 3) || (dy >= 12)) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dc02      	bgt.n	8001c74 <LCD_9+0x2c>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	dd0e      	ble.n	8001c92 <LCD_9+0x4a>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	dd02      	ble.n	8001c80 <LCD_9+0x38>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	dd08      	ble.n	8001c92 <LCD_9+0x4a>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0b      	cmp	r3, #11
 8001c84:	dc05      	bgt.n	8001c92 <LCD_9+0x4a>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	dd02      	ble.n	8001c92 <LCD_9+0x4a>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0b      	cmp	r3, #11
 8001c90:	dd14      	ble.n	8001cbc <LCD_9+0x74>
				int y = y0 + dy;
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <LCD_9+0x9c>)
 8001ca4:	7818      	ldrb	r0, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 fbc0 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	ddce      	ble.n	8001c68 <LCD_9+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	ddc4      	ble.n	8001c62 <LCD_9+0x1a>
			}
		}
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <LCD_Period>:

void LCD_Period(uint16_t x0, uint16_t y0) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	e02d      	b.n	8001d5e <LCD_Period+0x76>
		for(int dx = 0; dx <=width; dx++){
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	e023      	b.n	8001d50 <LCD_Period+0x68>
			if ((dx >= 3 && dx <= 6) && (dy >= 12 && dy <= 15)) {
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	dd1d      	ble.n	8001d4a <LCD_Period+0x62>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	dc1a      	bgt.n	8001d4a <LCD_Period+0x62>
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0b      	cmp	r3, #11
 8001d18:	dd17      	ble.n	8001d4a <LCD_Period+0x62>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	dc14      	bgt.n	8001d4a <LCD_Period+0x62>
				int y = y0 + dy;
 8001d20:	88bb      	ldrh	r3, [r7, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <LCD_Period+0x88>)
 8001d32:	7818      	ldrb	r0, [r3, #0]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f000 fb79 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	ddd7      	ble.n	8001d08 <LCD_Period+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	ddcd      	ble.n	8001d02 <LCD_Period+0x1a>
			}
		}
	}
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000000 	.word	0x20000000

08001d74 <LCD_Colon>:

void LCD_Colon(uint16_t x0, uint16_t y0) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	80fb      	strh	r3, [r7, #6]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001d84:	230f      	movs	r3, #15
 8001d86:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	e033      	b.n	8001df6 <LCD_Colon+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e029      	b.n	8001de8 <LCD_Colon+0x74>
			if ((dx >= 6 && dx <= 9) && ((dy >= 3 && dy <= 6)|| (dy >= 10 && dy <= 13))) {
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	dd23      	ble.n	8001de2 <LCD_Colon+0x6e>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	dc20      	bgt.n	8001de2 <LCD_Colon+0x6e>
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	dd02      	ble.n	8001dac <LCD_Colon+0x38>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	dd05      	ble.n	8001db8 <LCD_Colon+0x44>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b09      	cmp	r3, #9
 8001db0:	dd17      	ble.n	8001de2 <LCD_Colon+0x6e>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b0d      	cmp	r3, #13
 8001db6:	dc14      	bgt.n	8001de2 <LCD_Colon+0x6e>
				int y = y0 + dy;
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	69fa      	ldr	r2, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <LCD_Colon+0x94>)
 8001dca:	7818      	ldrb	r0, [r3, #0]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f000 fb2d 	bl	800243c <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	ddd1      	ble.n	8001d94 <LCD_Colon+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	ddc7      	ble.n	8001d8e <LCD_Colon+0x1a>
			}
		}
	}
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000000 	.word	0x20000000

08001e0c <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 8001e12:	f001 fc3b 	bl	800368c <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <LCD_GpioInit+0x90>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <LCD_GpioInit+0x94>)
 8001e66:	f001 ffcd 	bl	8003e04 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <LCD_GpioInit+0x98>)
 8001e78:	f001 ffc4 	bl	8003e04 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2104      	movs	r1, #4
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <LCD_GpioInit+0x94>)
 8001e82:	f002 f96b 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <LCD_GpioInit+0x98>)
 8001e8e:	f002 f965 	bl	800415c <HAL_GPIO_WritePin>
}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020c00 	.word	0x40020c00

08001ea8 <LCD_LtdcInit>:


void LCD_LtdcInit() {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8001eac:	f000 faf0 	bl	8002490 <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <LCD_LtdcInit+0x38>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <LCD_LtdcInit+0x3c>)
 8001eb8:	f002 fb4d 	bl	8004556 <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec2:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <LCD_LtdcInit+0x40>)
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <LCD_LtdcInit+0x3c>)
 8001ec6:	f002 fa99 	bl	80043fc <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <LCD_LtdcInit+0x3c>)
 8001ece:	f002 fb09 	bl	80044e4 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <LCD_LtdcInit+0x3c>)
 8001ed6:	f002 fb74 	bl	80045c2 <HAL_LTDC_Reload>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	20012c34 	.word	0x20012c34
 8001ee8:	080071bc 	.word	0x080071bc

08001eec <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f000 fa47 	bl	8002384 <LCD_WriteCommand>
	HAL_Delay(1000);
 8001ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efa:	f001 fe2b 	bl	8003b54 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001efe:	20cb      	movs	r0, #203	; 0xcb
 8001f00:	f000 fa40 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001f04:	2039      	movs	r0, #57	; 0x39
 8001f06:	f000 fa6b 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001f0a:	202c      	movs	r0, #44	; 0x2c
 8001f0c:	f000 fa68 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 fa65 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x34);
 8001f16:	2034      	movs	r0, #52	; 0x34
 8001f18:	f000 fa62 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f000 fa5f 	bl	80023e0 <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 8001f22:	20cf      	movs	r0, #207	; 0xcf
 8001f24:	f000 fa2e 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 fa59 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001f2e:	20c1      	movs	r0, #193	; 0xc1
 8001f30:	f000 fa56 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001f34:	2030      	movs	r0, #48	; 0x30
 8001f36:	f000 fa53 	bl	80023e0 <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 8001f3a:	20e8      	movs	r0, #232	; 0xe8
 8001f3c:	f000 fa22 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001f40:	2085      	movs	r0, #133	; 0x85
 8001f42:	f000 fa4d 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 fa4a 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001f4c:	2078      	movs	r0, #120	; 0x78
 8001f4e:	f000 fa47 	bl	80023e0 <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 8001f52:	20ea      	movs	r0, #234	; 0xea
 8001f54:	f000 fa16 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 fa41 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 fa3e 	bl	80023e0 <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 8001f64:	20ed      	movs	r0, #237	; 0xed
 8001f66:	f000 fa0d 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f000 fa38 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 fa35 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x12);
 8001f76:	2012      	movs	r0, #18
 8001f78:	f000 fa32 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001f7c:	2081      	movs	r0, #129	; 0x81
 8001f7e:	f000 fa2f 	bl	80023e0 <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 8001f82:	20f7      	movs	r0, #247	; 0xf7
 8001f84:	f000 f9fe 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001f88:	2020      	movs	r0, #32
 8001f8a:	f000 fa29 	bl	80023e0 <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001f8e:	20c0      	movs	r0, #192	; 0xc0
 8001f90:	f000 f9f8 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001f94:	2023      	movs	r0, #35	; 0x23
 8001f96:	f000 fa23 	bl	80023e0 <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 8001f9a:	20c1      	movs	r0, #193	; 0xc1
 8001f9c:	f000 f9f2 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001fa0:	2010      	movs	r0, #16
 8001fa2:	f000 fa1d 	bl	80023e0 <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 8001fa6:	20c5      	movs	r0, #197	; 0xc5
 8001fa8:	f000 f9ec 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 8001fac:	203e      	movs	r0, #62	; 0x3e
 8001fae:	f000 fa17 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x28);
 8001fb2:	2028      	movs	r0, #40	; 0x28
 8001fb4:	f000 fa14 	bl	80023e0 <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 8001fb8:	20c7      	movs	r0, #199	; 0xc7
 8001fba:	f000 f9e3 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x86);
 8001fbe:	2086      	movs	r0, #134	; 0x86
 8001fc0:	f000 fa0e 	bl	80023e0 <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 8001fc4:	2036      	movs	r0, #54	; 0x36
 8001fc6:	f000 f9dd 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001fca:	2048      	movs	r0, #72	; 0x48
 8001fcc:	f000 fa08 	bl	80023e0 <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 8001fd0:	203a      	movs	r0, #58	; 0x3a
 8001fd2:	f000 f9d7 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x55);
 8001fd6:	2055      	movs	r0, #85	; 0x55
 8001fd8:	f000 fa02 	bl	80023e0 <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 8001fdc:	20b1      	movs	r0, #177	; 0xb1
 8001fde:	f000 f9d1 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f000 f9fc 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x18);
 8001fe8:	2018      	movs	r0, #24
 8001fea:	f000 f9f9 	bl	80023e0 <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 8001fee:	20b6      	movs	r0, #182	; 0xb6
 8001ff0:	f000 f9c8 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x08);
 8001ff4:	2008      	movs	r0, #8
 8001ff6:	f000 f9f3 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x82);
 8001ffa:	2082      	movs	r0, #130	; 0x82
 8001ffc:	f000 f9f0 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x27);
 8002000:	2027      	movs	r0, #39	; 0x27
 8002002:	f000 f9ed 	bl	80023e0 <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 8002006:	20f2      	movs	r0, #242	; 0xf2
 8002008:	f000 f9bc 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f000 f9e7 	bl	80023e0 <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 8002012:	2026      	movs	r0, #38	; 0x26
 8002014:	f000 f9b6 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8002018:	2001      	movs	r0, #1
 800201a:	f000 f9e1 	bl	80023e0 <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 800201e:	20e0      	movs	r0, #224	; 0xe0
 8002020:	f000 f9b0 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8002024:	200f      	movs	r0, #15
 8002026:	f000 f9db 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x31);
 800202a:	2031      	movs	r0, #49	; 0x31
 800202c:	f000 f9d8 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x2B);
 8002030:	202b      	movs	r0, #43	; 0x2b
 8002032:	f000 f9d5 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002036:	200c      	movs	r0, #12
 8002038:	f000 f9d2 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800203c:	200e      	movs	r0, #14
 800203e:	f000 f9cf 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x08);
 8002042:	2008      	movs	r0, #8
 8002044:	f000 f9cc 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8002048:	204e      	movs	r0, #78	; 0x4e
 800204a:	f000 f9c9 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xF1);
 800204e:	20f1      	movs	r0, #241	; 0xf1
 8002050:	f000 f9c6 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x37);
 8002054:	2037      	movs	r0, #55	; 0x37
 8002056:	f000 f9c3 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x07);
 800205a:	2007      	movs	r0, #7
 800205c:	f000 f9c0 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x10);
 8002060:	2010      	movs	r0, #16
 8002062:	f000 f9bd 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002066:	2003      	movs	r0, #3
 8002068:	f000 f9ba 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800206c:	200e      	movs	r0, #14
 800206e:	f000 f9b7 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x09);
 8002072:	2009      	movs	r0, #9
 8002074:	f000 f9b4 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f9b1 	bl	80023e0 <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 800207e:	20e1      	movs	r0, #225	; 0xe1
 8002080:	f000 f980 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 f9ab 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 800208a:	200e      	movs	r0, #14
 800208c:	f000 f9a8 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x14);
 8002090:	2014      	movs	r0, #20
 8002092:	f000 f9a5 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002096:	2003      	movs	r0, #3
 8002098:	f000 f9a2 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x11);
 800209c:	2011      	movs	r0, #17
 800209e:	f000 f99f 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x07);
 80020a2:	2007      	movs	r0, #7
 80020a4:	f000 f99c 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x31);
 80020a8:	2031      	movs	r0, #49	; 0x31
 80020aa:	f000 f999 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xC1);
 80020ae:	20c1      	movs	r0, #193	; 0xc1
 80020b0:	f000 f996 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x48);
 80020b4:	2048      	movs	r0, #72	; 0x48
 80020b6:	f000 f993 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x08);
 80020ba:	2008      	movs	r0, #8
 80020bc:	f000 f990 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80020c0:	200f      	movs	r0, #15
 80020c2:	f000 f98d 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80020c6:	200c      	movs	r0, #12
 80020c8:	f000 f98a 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x31);
 80020cc:	2031      	movs	r0, #49	; 0x31
 80020ce:	f000 f987 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x36);
 80020d2:	2036      	movs	r0, #54	; 0x36
 80020d4:	f000 f984 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0F);
 80020d8:	200f      	movs	r0, #15
 80020da:	f000 f981 	bl	80023e0 <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 80020de:	2011      	movs	r0, #17
 80020e0:	f000 f950 	bl	8002384 <LCD_WriteCommand>
	HAL_Delay(120);
 80020e4:	2078      	movs	r0, #120	; 0x78
 80020e6:	f001 fd35 	bl	8003b54 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 80020ea:	2029      	movs	r0, #41	; 0x29
 80020ec:	f000 f94a 	bl	8002384 <LCD_WriteCommand>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 80020f8:	20ca      	movs	r0, #202	; 0xca
 80020fa:	f000 f943 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 80020fe:	20c3      	movs	r0, #195	; 0xc3
 8002100:	f000 f96e 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x08);
 8002104:	2008      	movs	r0, #8
 8002106:	f000 f96b 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x50);
 800210a:	2050      	movs	r0, #80	; 0x50
 800210c:	f000 f968 	bl	80023e0 <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 8002110:	20cf      	movs	r0, #207	; 0xcf
 8002112:	f000 f937 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f000 f962 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xC1);
 800211c:	20c1      	movs	r0, #193	; 0xc1
 800211e:	f000 f95f 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x30);
 8002122:	2030      	movs	r0, #48	; 0x30
 8002124:	f000 f95c 	bl	80023e0 <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 8002128:	20ed      	movs	r0, #237	; 0xed
 800212a:	f000 f92b 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 800212e:	2064      	movs	r0, #100	; 0x64
 8002130:	f000 f956 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x03);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f953 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x12);
 800213a:	2012      	movs	r0, #18
 800213c:	f000 f950 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x81);
 8002140:	2081      	movs	r0, #129	; 0x81
 8002142:	f000 f94d 	bl	80023e0 <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 8002146:	20e8      	movs	r0, #232	; 0xe8
 8002148:	f000 f91c 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 800214c:	2085      	movs	r0, #133	; 0x85
 800214e:	f000 f947 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f944 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002158:	2078      	movs	r0, #120	; 0x78
 800215a:	f000 f941 	bl	80023e0 <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 800215e:	20cb      	movs	r0, #203	; 0xcb
 8002160:	f000 f910 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8002164:	2039      	movs	r0, #57	; 0x39
 8002166:	f000 f93b 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800216a:	202c      	movs	r0, #44	; 0x2c
 800216c:	f000 f938 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f935 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x34);
 8002176:	2034      	movs	r0, #52	; 0x34
 8002178:	f000 f932 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x02);
 800217c:	2002      	movs	r0, #2
 800217e:	f000 f92f 	bl	80023e0 <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 8002182:	20f7      	movs	r0, #247	; 0xf7
 8002184:	f000 f8fe 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8002188:	2020      	movs	r0, #32
 800218a:	f000 f929 	bl	80023e0 <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 800218e:	20ea      	movs	r0, #234	; 0xea
 8002190:	f000 f8f8 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f000 f923 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f920 	bl	80023e0 <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 80021a0:	20b1      	movs	r0, #177	; 0xb1
 80021a2:	f000 f8ef 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f91a 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80021ac:	201b      	movs	r0, #27
 80021ae:	f000 f917 	bl	80023e0 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80021b2:	20b6      	movs	r0, #182	; 0xb6
 80021b4:	f000 f8e6 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f000 f911 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80021be:	20a2      	movs	r0, #162	; 0xa2
 80021c0:	f000 f90e 	bl	80023e0 <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 80021c4:	20c0      	movs	r0, #192	; 0xc0
 80021c6:	f000 f8dd 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80021ca:	2010      	movs	r0, #16
 80021cc:	f000 f908 	bl	80023e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80021d0:	20c1      	movs	r0, #193	; 0xc1
 80021d2:	f000 f8d7 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80021d6:	2010      	movs	r0, #16
 80021d8:	f000 f902 	bl	80023e0 <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 80021dc:	20c5      	movs	r0, #197	; 0xc5
 80021de:	f000 f8d1 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 80021e2:	2045      	movs	r0, #69	; 0x45
 80021e4:	f000 f8fc 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x15);
 80021e8:	2015      	movs	r0, #21
 80021ea:	f000 f8f9 	bl	80023e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80021ee:	20c7      	movs	r0, #199	; 0xc7
 80021f0:	f000 f8c8 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80021f4:	2090      	movs	r0, #144	; 0x90
 80021f6:	f000 f8f3 	bl	80023e0 <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 80021fa:	2036      	movs	r0, #54	; 0x36
 80021fc:	f000 f8c2 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8002200:	20c8      	movs	r0, #200	; 0xc8
 8002202:	f000 f8ed 	bl	80023e0 <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8002206:	20f2      	movs	r0, #242	; 0xf2
 8002208:	f000 f8bc 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f8e7 	bl	80023e0 <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8002212:	20b0      	movs	r0, #176	; 0xb0
 8002214:	f000 f8b6 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8002218:	20c2      	movs	r0, #194	; 0xc2
 800221a:	f000 f8e1 	bl	80023e0 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 800221e:	20b6      	movs	r0, #182	; 0xb6
 8002220:	f000 f8b0 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002224:	200a      	movs	r0, #10
 8002226:	f000 f8db 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xA7);
 800222a:	20a7      	movs	r0, #167	; 0xa7
 800222c:	f000 f8d8 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x27);
 8002230:	2027      	movs	r0, #39	; 0x27
 8002232:	f000 f8d5 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002236:	2004      	movs	r0, #4
 8002238:	f000 f8d2 	bl	80023e0 <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 800223c:	202a      	movs	r0, #42	; 0x2a
 800223e:	f000 f8a1 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f8cc 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002248:	2000      	movs	r0, #0
 800224a:	f000 f8c9 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800224e:	2000      	movs	r0, #0
 8002250:	f000 f8c6 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8002254:	20ef      	movs	r0, #239	; 0xef
 8002256:	f000 f8c3 	bl	80023e0 <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 800225a:	202b      	movs	r0, #43	; 0x2b
 800225c:	f000 f892 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f8bd 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f8ba 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x01);
 800226c:	2001      	movs	r0, #1
 800226e:	f000 f8b7 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8002272:	203f      	movs	r0, #63	; 0x3f
 8002274:	f000 f8b4 	bl	80023e0 <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 8002278:	20f6      	movs	r0, #246	; 0xf6
 800227a:	f000 f883 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 f8ae 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002284:	2000      	movs	r0, #0
 8002286:	f000 f8ab 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x06);
 800228a:	2006      	movs	r0, #6
 800228c:	f000 f8a8 	bl	80023e0 <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 8002290:	202c      	movs	r0, #44	; 0x2c
 8002292:	f000 f877 	bl	8002384 <LCD_WriteCommand>
	HAL_Delay(200);
 8002296:	20c8      	movs	r0, #200	; 0xc8
 8002298:	f001 fc5c 	bl	8003b54 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 800229c:	2026      	movs	r0, #38	; 0x26
 800229e:	f000 f871 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 f89c 	bl	80023e0 <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 80022a8:	20e0      	movs	r0, #224	; 0xe0
 80022aa:	f000 f86b 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80022ae:	200f      	movs	r0, #15
 80022b0:	f000 f896 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x29);
 80022b4:	2029      	movs	r0, #41	; 0x29
 80022b6:	f000 f893 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x24);
 80022ba:	2024      	movs	r0, #36	; 0x24
 80022bc:	f000 f890 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80022c0:	200c      	movs	r0, #12
 80022c2:	f000 f88d 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80022c6:	200e      	movs	r0, #14
 80022c8:	f000 f88a 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x09);
 80022cc:	2009      	movs	r0, #9
 80022ce:	f000 f887 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x4E);
 80022d2:	204e      	movs	r0, #78	; 0x4e
 80022d4:	f000 f884 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x78);
 80022d8:	2078      	movs	r0, #120	; 0x78
 80022da:	f000 f881 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x3C);
 80022de:	203c      	movs	r0, #60	; 0x3c
 80022e0:	f000 f87e 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x09);
 80022e4:	2009      	movs	r0, #9
 80022e6:	f000 f87b 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x13);
 80022ea:	2013      	movs	r0, #19
 80022ec:	f000 f878 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x05);
 80022f0:	2005      	movs	r0, #5
 80022f2:	f000 f875 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x17);
 80022f6:	2017      	movs	r0, #23
 80022f8:	f000 f872 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x11);
 80022fc:	2011      	movs	r0, #17
 80022fe:	f000 f86f 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002302:	2000      	movs	r0, #0
 8002304:	f000 f86c 	bl	80023e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8002308:	20e1      	movs	r0, #225	; 0xe1
 800230a:	f000 f83b 	bl	8002384 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f866 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x16);
 8002314:	2016      	movs	r0, #22
 8002316:	f000 f863 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 800231a:	201b      	movs	r0, #27
 800231c:	f000 f860 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x04);
 8002320:	2004      	movs	r0, #4
 8002322:	f000 f85d 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x11);
 8002326:	2011      	movs	r0, #17
 8002328:	f000 f85a 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x07);
 800232c:	2007      	movs	r0, #7
 800232e:	f000 f857 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x31);
 8002332:	2031      	movs	r0, #49	; 0x31
 8002334:	f000 f854 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x33);
 8002338:	2033      	movs	r0, #51	; 0x33
 800233a:	f000 f851 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x42);
 800233e:	2042      	movs	r0, #66	; 0x42
 8002340:	f000 f84e 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002344:	2005      	movs	r0, #5
 8002346:	f000 f84b 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 800234a:	200c      	movs	r0, #12
 800234c:	f000 f848 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8002350:	200a      	movs	r0, #10
 8002352:	f000 f845 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x28);
 8002356:	2028      	movs	r0, #40	; 0x28
 8002358:	f000 f842 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x2F);
 800235c:	202f      	movs	r0, #47	; 0x2f
 800235e:	f000 f83f 	bl	80023e0 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8002362:	200f      	movs	r0, #15
 8002364:	f000 f83c 	bl	80023e0 <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 8002368:	2011      	movs	r0, #17
 800236a:	f000 f80b 	bl	8002384 <LCD_WriteCommand>
	HAL_Delay(200);
 800236e:	20c8      	movs	r0, #200	; 0xc8
 8002370:	f001 fbf0 	bl	8003b54 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8002374:	2029      	movs	r0, #41	; 0x29
 8002376:	f000 f805 	bl	8002384 <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 800237a:	202c      	movs	r0, #44	; 0x2c
 800237c:	f000 f802 	bl	8002384 <LCD_WriteCommand>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	2104      	movs	r1, #4
 8002392:	4810      	ldr	r0, [pc, #64]	; (80023d4 <LCD_WriteCommand+0x50>)
 8002394:	f001 fee2 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800239e:	480e      	ldr	r0, [pc, #56]	; (80023d8 <LCD_WriteCommand+0x54>)
 80023a0:	f001 fedc 	bl	800415c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 80023a4:	1df9      	adds	r1, r7, #7
 80023a6:	2301      	movs	r3, #1
 80023a8:	2201      	movs	r2, #1
 80023aa:	480c      	ldr	r0, [pc, #48]	; (80023dc <LCD_WriteCommand+0x58>)
 80023ac:	f003 fac8 	bl	8005940 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80023b0:	bf00      	nop
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <LCD_WriteCommand+0x58>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f8      	beq.n	80023b2 <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2104      	movs	r1, #4
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <LCD_WriteCommand+0x50>)
 80023c6:	f001 fec9 	bl	800415c <HAL_GPIO_WritePin>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	20013790 	.word	0x20013790

080023e0 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2104      	movs	r1, #4
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <LCD_WriteData+0x50>)
 80023f0:	f001 feb4 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 80023f4:	2201      	movs	r2, #1
 80023f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fa:	480e      	ldr	r0, [pc, #56]	; (8002434 <LCD_WriteData+0x54>)
 80023fc:	f001 feae 	bl	800415c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 8002400:	1df9      	adds	r1, r7, #7
 8002402:	230a      	movs	r3, #10
 8002404:	2201      	movs	r2, #1
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <LCD_WriteData+0x58>)
 8002408:	f003 fa9a 	bl	8005940 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 800240c:	bf00      	nop
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <LCD_WriteData+0x58>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f8      	beq.n	800240e <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	2104      	movs	r1, #4
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <LCD_WriteData+0x50>)
 8002422:	f001 fe9b 	bl	800415c <HAL_GPIO_WritePin>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	20013790 	.word	0x20013790

0800243c <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800244e:	d205      	bcs.n	800245c <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 8002450:	4a05      	ldr	r2, [pc, #20]	; (8002468 <LCD_WriteGRAM+0x2c>)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e000      	b.n	800245e <LCD_WriteGRAM+0x22>
		return;
 800245c:	bf00      	nop
}
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	20000004 	.word	0x20000004

0800246c <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc(uint8_t c) {
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	memset(GRAM, c, LCD_WIDTH * LCD_HEIGHT);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800247c:	4619      	mov	r1, r3
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <LCD_ClearScreenLtdc+0x20>)
 8002480:	f004 fe1a 	bl	80070b8 <memset>
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000004 	.word	0x20000004

08002490 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08e      	sub	sp, #56	; 0x38
 8002494:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2234      	movs	r2, #52	; 0x34
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f004 fe0b 	bl	80070b8 <memset>

  hltdc.Instance = LTDC;
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <MX_LTDC_Init+0xfc>)
 80024a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024c2:	2209      	movs	r2, #9
 80024c4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024ce:	221d      	movs	r2, #29
 80024d0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80024d2:	4b2d      	ldr	r3, [pc, #180]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024d4:	2203      	movs	r2, #3
 80024d6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024da:	f240 120d 	movw	r2, #269	; 0x10d
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024e2:	f240 1243 	movw	r2, #323	; 0x143
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024ea:	f240 1217 	movw	r2, #279	; 0x117
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024f2:	f240 1247 	movw	r2, #327	; 0x147
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <MX_LTDC_Init+0xf8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_LTDC_Init+0xf8>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_LTDC_Init+0xf8>)
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_LTDC_Init+0xf8>)
 8002512:	f001 fe61 	bl	80041d8 <HAL_LTDC_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800251c:	f000 fb5a 	bl	8002bd4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 8002524:	23ef      	movs	r3, #239	; 0xef
 8002526:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 800252c:	f240 133f 	movw	r3, #319	; 0x13f
 8002530:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 8002532:	2305      	movs	r3, #5
 8002534:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 8002536:	23ff      	movs	r3, #255	; 0xff
 8002538:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800253e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002542:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002544:	2307      	movs	r3, #7
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800254c:	23f0      	movs	r3, #240	; 0xf0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8002550:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_LTDC_Init+0xf8>)
 8002570:	f001 ff06 	bl	8004380 <HAL_LTDC_ConfigLayer>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800257a:	f000 fb2b 	bl	8002bd4 <Error_Handler>
  }

}
 800257e:	bf00      	nop
 8002580:	3738      	adds	r7, #56	; 0x38
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20012c34 	.word	0x20012c34
 800258c:	40016800 	.word	0x40016800

08002590 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b090      	sub	sp, #64	; 0x40
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a75      	ldr	r2, [pc, #468]	; (8002784 <HAL_LTDC_MspInit+0x1f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f040 80e4 	bne.w	800277c <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c2:	6453      	str	r3, [r2, #68]	; 0x44
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025da:	f043 0320 	orr.w	r3, r3, #32
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b69      	ldr	r3, [pc, #420]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a64      	ldr	r2, [pc, #400]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002612:	f043 0302 	orr.w	r3, r3, #2
 8002616:	6313      	str	r3, [r2, #48]	; 0x30
 8002618:	4b5b      	ldr	r3, [pc, #364]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	6313      	str	r3, [r2, #48]	; 0x30
 8002634:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4a4f      	ldr	r2, [pc, #316]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	4b42      	ldr	r3, [pc, #264]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4a41      	ldr	r2, [pc, #260]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 8002682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002686:	6313      	str	r3, [r2, #48]	; 0x30
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_LTDC_MspInit+0x1f8>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a6:	230e      	movs	r3, #14
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ae:	4619      	mov	r1, r3
 80026b0:	4836      	ldr	r0, [pc, #216]	; (800278c <HAL_LTDC_MspInit+0x1fc>)
 80026b2:	f001 fba7 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80026b6:	f641 0358 	movw	r3, #6232	; 0x1858
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c4:	2300      	movs	r3, #0
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026c8:	230e      	movs	r3, #14
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d0:	4619      	mov	r1, r3
 80026d2:	482f      	ldr	r0, [pc, #188]	; (8002790 <HAL_LTDC_MspInit+0x200>)
 80026d4:	f001 fb96 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d8:	2303      	movs	r3, #3
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026e8:	2309      	movs	r3, #9
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f0:	4619      	mov	r1, r3
 80026f2:	4828      	ldr	r0, [pc, #160]	; (8002794 <HAL_LTDC_MspInit+0x204>)
 80026f4:	f001 fb86 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 80026f8:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800270a:	230e      	movs	r3, #14
 800270c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800270e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002712:	4619      	mov	r1, r3
 8002714:	4820      	ldr	r0, [pc, #128]	; (8002798 <HAL_LTDC_MspInit+0x208>)
 8002716:	f001 fb75 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800271a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272c:	230e      	movs	r3, #14
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002734:	4619      	mov	r1, r3
 8002736:	4817      	ldr	r0, [pc, #92]	; (8002794 <HAL_LTDC_MspInit+0x204>)
 8002738:	f001 fb64 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800273c:	2308      	movs	r3, #8
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800274c:	230e      	movs	r3, #14
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	4811      	ldr	r0, [pc, #68]	; (800279c <HAL_LTDC_MspInit+0x20c>)
 8002758:	f001 fb54 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800275c:	23c0      	movs	r3, #192	; 0xc0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800276c:	230e      	movs	r3, #14
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002774:	4619      	mov	r1, r3
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <HAL_LTDC_MspInit+0x210>)
 8002778:	f001 fb44 	bl	8003e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800277c:	bf00      	nop
 800277e:	3740      	adds	r7, #64	; 0x40
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40016800 	.word	0x40016800
 8002788:	40023800 	.word	0x40023800
 800278c:	40021400 	.word	0x40021400
 8002790:	40020000 	.word	0x40020000
 8002794:	40020400 	.word	0x40020400
 8002798:	40021800 	.word	0x40021800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40020800 	.word	0x40020800

080027a4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db09      	blt.n	80027ca <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <__NVIC_GetPriority+0x48>)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	4413      	add	r3, r2
 80027be:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	e009      	b.n	80027de <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <__NVIC_GetPriority+0x4c>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	b2db      	uxtb	r3, r3
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fa:	f001 f939 	bl	8003a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027fe:	f000 f84b 	bl	8002898 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8002802:	f000 f95f 	bl	8002ac4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002806:	f000 f8fd 	bl	8002a04 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800280a:	f000 f931 	bl	8002a70 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800280e:	f000 f8d3 	bl	80029b8 <MX_RTC_Init>
  
  //LCD Initialization
  LCD_GpioInit();
 8002812:	f7ff fafb 	bl	8001e0c <LCD_GpioInit>
  LCD_LtdcInit();
 8002816:	f7ff fb47 	bl	8001ea8 <LCD_LtdcInit>
  LCD_DispInit_Spi();
 800281a:	f7ff fb67 	bl	8001eec <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 800281e:	f7ff fc69 	bl	80020f4 <LCD_DispInit_Ltdc>
  
  //Button Interrupt Initialization
  initializeGPIONVIC();
 8002822:	f000 f9dd 	bl	8002be0 <initializeGPIONVIC>

  //Displays Welcome and then Menu
  InitialScreen();
 8002826:	f000 fe67 	bl	80034f8 <InitialScreen>
  MenuScreen();
 800282a:	f000 fe83 	bl	8003534 <MenuScreen>

  //Bluetooth Setup
  HAL_Delay(200);
 800282e:	20c8      	movs	r0, #200	; 0xc8
 8002830:	f001 f990 	bl	8003b54 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8002834:	2201      	movs	r2, #1
 8002836:	2102      	movs	r1, #2
 8002838:	4813      	ldr	r0, [pc, #76]	; (8002888 <main+0x94>)
 800283a:	f001 fc8f 	bl	800415c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800283e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002842:	f001 f987 	bl	8003b54 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8002846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800284a:	2100      	movs	r1, #0
 800284c:	480f      	ldr	r0, [pc, #60]	; (800288c <main+0x98>)
 800284e:	f004 fc33 	bl	80070b8 <memset>
  HAL_TIM_Base_Start_IT(&htim6);
 8002852:	480f      	ldr	r0, [pc, #60]	; (8002890 <main+0x9c>)
 8002854:	f003 fa63 	bl	8005d1e <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <main+0xa0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <main+0xa0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0220 	orr.w	r2, r2, #32
 8002866:	60da      	str	r2, [r3, #12]
  // Change uart pritority
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2103      	movs	r1, #3
 800286c:	2025      	movs	r0, #37	; 0x25
 800286e:	f001 fa70 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002872:	2025      	movs	r0, #37	; 0x25
 8002874:	f001 fa89 	bl	8003d8a <HAL_NVIC_EnableIRQ>

  MenuScreen();
 8002878:	f000 fe5c 	bl	8003534 <MenuScreen>

  //NVIC_GetPriority(SysTick_IRQn);
  uint8_t uart_priority = NVIC_GetPriority(USART1_IRQn);
 800287c:	2025      	movs	r0, #37	; 0x25
 800287e:	f7ff ff91 	bl	80027a4 <__NVIC_GetPriority>
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002886:	e7fe      	b.n	8002886 <main+0x92>
 8002888:	40021400 	.word	0x40021400
 800288c:	20013320 	.word	0x20013320
 8002890:	20012d3c 	.word	0x20012d3c
 8002894:	20012cdc 	.word	0x20012cdc

08002898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0a0      	sub	sp, #128	; 0x80
 800289c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028a2:	2230      	movs	r2, #48	; 0x30
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f004 fc06 	bl	80070b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2230      	movs	r2, #48	; 0x30
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fbf7 	bl	80070b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <SystemClock_Config+0x118>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <SystemClock_Config+0x118>)
 80028d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6413      	str	r3, [r2, #64]	; 0x40
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <SystemClock_Config+0x118>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <SystemClock_Config+0x11c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <SystemClock_Config+0x11c>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <SystemClock_Config+0x11c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002906:	230a      	movs	r3, #10
 8002908:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800290a:	2301      	movs	r3, #1
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290e:	2310      	movs	r3, #16
 8002910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002912:	2301      	movs	r3, #1
 8002914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	2302      	movs	r3, #2
 8002918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800291a:	2300      	movs	r3, #0
 800291c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800291e:	2308      	movs	r3, #8
 8002920:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002922:	23b4      	movs	r3, #180	; 0xb4
 8002924:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002926:	2302      	movs	r3, #2
 8002928:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800292a:	2304      	movs	r3, #4
 800292c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800292e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002932:	4618      	mov	r0, r3
 8002934:	f002 f862 	bl	80049fc <HAL_RCC_OscConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800293e:	f000 f949 	bl	8002bd4 <Error_Handler>
  }
   /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002942:	f002 f80b 	bl	800495c <HAL_PWREx_EnableOverDrive>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800294c:	f000 f942 	bl	8002bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002950:	230f      	movs	r3, #15
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002954:	2302      	movs	r3, #2
 8002956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800295c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800296c:	2105      	movs	r1, #5
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fab4 	bl	8004edc <HAL_RCC_ClockConfig>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800297a:	f000 f92b 	bl	8002bd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LTDC;
 800297e:	2328      	movs	r3, #40	; 0x28
 8002980:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002986:	637b      	str	r3, [r7, #52]	; 0x34

  PeriphClkInitStruct.PLLSAI.PLLSAIN = 56;
 8002988:	2338      	movs	r3, #56	; 0x38
 800298a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800298c:	2307      	movs	r3, #7
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002990:	2300      	movs	r3, #0
 8002992:	633b      	str	r3, [r7, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4618      	mov	r0, r3
 800299a:	f002 fc6f 	bl	800527c <HAL_RCCEx_PeriphCLKConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80029a4:	f000 f916 	bl	8002bd4 <Error_Handler>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3780      	adds	r7, #128	; 0x80
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40007000 	.word	0x40007000

080029b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <MX_RTC_Init+0x44>)
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <MX_RTC_Init+0x48>)
 80029c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_RTC_Init+0x44>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <MX_RTC_Init+0x44>)
 80029ca:	227f      	movs	r2, #127	; 0x7f
 80029cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <MX_RTC_Init+0x44>)
 80029d0:	22ff      	movs	r2, #255	; 0xff
 80029d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <MX_RTC_Init+0x44>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <MX_RTC_Init+0x44>)
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <MX_RTC_Init+0x44>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <MX_RTC_Init+0x44>)
 80029e8:	f002 fe06 	bl	80055f8 <HAL_RTC_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80029f2:	f000 f8ef 	bl	8002bd4 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20012d1c 	.word	0x20012d1c
 8002a00:	40002800 	.word	0x40002800

08002a04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a14:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <MX_TIM6_Init+0x68>)
 8002a16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720;
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a1a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002a1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a28:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002a2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a36:	f003 f947 	bl	8005cc8 <HAL_TIM_Base_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a40:	f000 f8c8 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a4c:	463b      	mov	r3, r7
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_TIM6_Init+0x64>)
 8002a52:	f003 fb63 	bl	800611c <HAL_TIMEx_MasterConfigSynchronization>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a5c:	f000 f8ba 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20012d3c 	.word	0x20012d3c
 8002a6c:	40001000 	.word	0x40001000

08002a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <MX_USART1_UART_Init+0x50>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aa6:	4805      	ldr	r0, [pc, #20]	; (8002abc <MX_USART1_UART_Init+0x4c>)
 8002aa8:	f003 fbc8 	bl	800623c <HAL_UART_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ab2:	f000 f88f 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20012cdc 	.word	0x20012cdc
 8002ac0:	40011000 	.word	0x40011000

08002ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08c      	sub	sp, #48	; 0x30
 8002ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aca:	f107 031c 	add.w	r3, r7, #28
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a33      	ldr	r2, [pc, #204]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b00:	f043 0320 	orr.w	r3, r3, #32
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <MX_GPIO_Init+0x108>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <MX_GPIO_Init+0x10c>)
 8002ba4:	f001 fada 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bac:	2301      	movs	r3, #1
 8002bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <MX_GPIO_Init+0x10c>)
 8002bc0:	f001 f920 	bl	8003e04 <HAL_GPIO_Init>

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40021400 	.word	0x40021400

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <Error_Handler+0x8>
	...

08002be0 <initializeGPIONVIC>:
}
#endif /* USE_FULL_ASSERT */

// initialize GPIO, NVIC
void initializeGPIONVIC(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
	/*Configure GPIO pin: PA0 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf8:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <initializeGPIONVIC+0xdc>)
 8002bfa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	482e      	ldr	r0, [pc, #184]	; (8002cc0 <initializeGPIONVIC+0xe0>)
 8002c06:	f001 f8fd 	bl	8003e04 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	2006      	movs	r0, #6
 8002c10:	f001 f89f 	bl	8003d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c14:	2006      	movs	r0, #6
 8002c16:	f001 f8b8 	bl	8003d8a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c1e:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <initializeGPIONVIC+0xdc>)
 8002c20:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4826      	ldr	r0, [pc, #152]	; (8002cc4 <initializeGPIONVIC+0xe4>)
 8002c2c:	f001 f8ea 	bl	8003e04 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2104      	movs	r1, #4
 8002c34:	2007      	movs	r0, #7
 8002c36:	f001 f88c 	bl	8003d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c3a:	2007      	movs	r0, #7
 8002c3c:	f001 f8a5 	bl	8003d8a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c40:	2304      	movs	r3, #4
 8002c42:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <initializeGPIONVIC+0xdc>)
 8002c46:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	481c      	ldr	r0, [pc, #112]	; (8002cc4 <initializeGPIONVIC+0xe4>)
 8002c52:	f001 f8d7 	bl	8003e04 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI2_IRQn, 4, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2104      	movs	r1, #4
 8002c5a:	2008      	movs	r0, #8
 8002c5c:	f001 f879 	bl	8003d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c60:	2008      	movs	r0, #8
 8002c62:	f001 f892 	bl	8003d8a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c66:	2308      	movs	r3, #8
 8002c68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <initializeGPIONVIC+0xdc>)
 8002c6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4813      	ldr	r0, [pc, #76]	; (8002cc4 <initializeGPIONVIC+0xe4>)
 8002c78:	f001 f8c4 	bl	8003e04 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2104      	movs	r1, #4
 8002c80:	2009      	movs	r0, #9
 8002c82:	f001 f866 	bl	8003d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c86:	2009      	movs	r0, #9
 8002c88:	f001 f87f 	bl	8003d8a <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <initializeGPIONVIC+0xdc>)
 8002c92:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4809      	ldr	r0, [pc, #36]	; (8002cc4 <initializeGPIONVIC+0xe4>)
 8002c9e:	f001 f8b1 	bl	8003e04 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI4_IRQn, 4, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2104      	movs	r1, #4
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f001 f853 	bl	8003d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f001 f86c 	bl	8003d8a <HAL_NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	10110000 	.word	0x10110000
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <EXTI0_IRQHandler>:


// EXIT0 handler
// Rotate through screens with blue UI button
void EXTI0_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
	if (view_index == 0)
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <EXTI0_IRQHandler+0x12>
	{
		BluetoothScreen();
 8002cd4:	f000 fc44 	bl	8003560 <BluetoothScreen>
 8002cd8:	e013      	b.n	8002d02 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 1)
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d102      	bne.n	8002ce8 <EXTI0_IRQHandler+0x20>
	{
		ScheduleScreen();
 8002ce2:	f000 fc61 	bl	80035a8 <ScheduleScreen>
 8002ce6:	e00c      	b.n	8002d02 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 2)
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d102      	bne.n	8002cf6 <EXTI0_IRQHandler+0x2e>
	{
		DispensedScreen();
 8002cf0:	f000 fc9a 	bl	8003628 <DispensedScreen>
 8002cf4:	e005      	b.n	8002d02 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 3)
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d101      	bne.n	8002d02 <EXTI0_IRQHandler+0x3a>
	{
		MenuScreen();
 8002cfe:	f000 fc19 	bl	8003534 <MenuScreen>
	}
	view_index = (view_index + 1) % 4;
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	425a      	negs	r2, r3
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	bf58      	it	pl
 8002d14:	4253      	negpl	r3, r2
 8002d16:	4a03      	ldr	r2, [pc, #12]	; (8002d24 <EXTI0_IRQHandler+0x5c>)
 8002d18:	6013      	str	r3, [r2, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f001 fa38 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20012c2c 	.word	0x20012c2c

08002d28 <EXTI1_IRQHandler>:

//Select different screens with separate push buttons
void EXTI1_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	MenuScreen();
 8002d2c:	f000 fc02 	bl	8003534 <MenuScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d30:	2002      	movs	r0, #2
 8002d32:	f001 fa2d 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	af00      	add	r7, sp, #0
	BluetoothScreen();
 8002d3e:	f000 fc0f 	bl	8003560 <BluetoothScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d42:	2004      	movs	r0, #4
 8002d44:	f001 fa24 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	ScheduleScreen();
 8002d50:	f000 fc2a 	bl	80035a8 <ScheduleScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d54:	2008      	movs	r0, #8
 8002d56:	f001 fa1b 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
	DispensedScreen();
 8002d62:	f000 fc61 	bl	8003628 <DispensedScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d66:	2010      	movs	r0, #16
 8002d68:	f001 fa12 	bl	8004190 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <Process_string>:

//  mon{\"mBinNumb\":\"1\",\"mMedName\":\"test\",\"mNumbPills\":\"2\",\"mTime\":\"6:48 PM\"}
//  mon{"mBinNumb":"1","mMedName":"Tylenol","mNumbPills":"1",'mTime":"3:00 PM"}
// grab data if the string format is as above
void Process_string(char arr[])
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	  strncpy (mdate, arr, 3);
 8002d78:	2203      	movs	r2, #3
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4834      	ldr	r0, [pc, #208]	; (8002e50 <Process_string+0xe0>)
 8002d7e:	f004 f9b2 	bl	80070e6 <strncpy>
	  strncpy (nbin, arr+16, 1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3310      	adds	r3, #16
 8002d86:	2201      	movs	r2, #1
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4832      	ldr	r0, [pc, #200]	; (8002e54 <Process_string+0xe4>)
 8002d8c:	f004 f9ab 	bl	80070e6 <strncpy>

	  uint8_t j=0, i=31;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	231f      	movs	r3, #31
 8002d96:	73bb      	strb	r3, [r7, #14]
	  while(arr[i] != ',')
 8002d98:	e005      	b.n	8002da6 <Process_string+0x36>
	  {
		  i++;
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	73bb      	strb	r3, [r7, #14]
		  j++;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
	  while(arr[i] != ',')
 8002da6:	7bbb      	ldrb	r3, [r7, #14]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b2c      	cmp	r3, #44	; 0x2c
 8002db0:	d1f3      	bne.n	8002d9a <Process_string+0x2a>
	  }

	  strncpy (med, arr+31, j-1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 011f 	add.w	r1, r3, #31
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4826      	ldr	r0, [pc, #152]	; (8002e58 <Process_string+0xe8>)
 8002dc0:	f004 f991 	bl	80070e6 <strncpy>
	  strncpy (npill, arr+46+j, 1);
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	332e      	adds	r3, #46	; 0x2e
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4822      	ldr	r0, [pc, #136]	; (8002e5c <Process_string+0xec>)
 8002dd2:	f004 f988 	bl	80070e6 <strncpy>
	  if(arr[62+j]==':')
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	333e      	adds	r3, #62	; 0x3e
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b3a      	cmp	r3, #58	; 0x3a
 8002de4:	d118      	bne.n	8002e18 <Process_string+0xa8>
	  {
		  strncpy (mtime, arr+58+j, 4);
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	333a      	adds	r3, #58	; 0x3a
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	2204      	movs	r2, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	481b      	ldr	r0, [pc, #108]	; (8002e60 <Process_string+0xf0>)
 8002df4:	f004 f977 	bl	80070e6 <strncpy>
		  if(arr[66+j]=='A')
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3342      	adds	r3, #66	; 0x42
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b41      	cmp	r3, #65	; 0x41
 8002e06:	d103      	bne.n	8002e10 <Process_string+0xa0>
		  {
			  apm = 0;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <Process_string+0xf4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
		  {
			  apm = 1;
		  }
	  }

}
 8002e0e:	e01b      	b.n	8002e48 <Process_string+0xd8>
			  apm = 1;
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <Process_string+0xf4>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
}
 8002e16:	e017      	b.n	8002e48 <Process_string+0xd8>
		  strncpy (mtime, arr+58+j, 5);
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	333a      	adds	r3, #58	; 0x3a
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	2205      	movs	r2, #5
 8002e22:	4619      	mov	r1, r3
 8002e24:	480e      	ldr	r0, [pc, #56]	; (8002e60 <Process_string+0xf0>)
 8002e26:	f004 f95e 	bl	80070e6 <strncpy>
		  if(arr[67+j]=='A')
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3343      	adds	r3, #67	; 0x43
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b41      	cmp	r3, #65	; 0x41
 8002e38:	d103      	bne.n	8002e42 <Process_string+0xd2>
			  apm = 0;
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <Process_string+0xf4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
}
 8002e40:	e002      	b.n	8002e48 <Process_string+0xd8>
			  apm = 1;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <Process_string+0xf4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20012da0 	.word	0x20012da0
 8002e54:	20013788 	.word	0x20013788
 8002e58:	20013714 	.word	0x20013714
 8002e5c:	2001378c 	.word	0x2001378c
 8002e60:	2001370c 	.word	0x2001370c
 8002e64:	2001331c 	.word	0x2001331c

08002e68 <Individual_med>:

// arr[] is the overall string possibly including several med, target[] is a 2d array
// which stores each med
void Individual_med(char arr[], char target[])
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0a0      	sub	sp, #128	; 0x80
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
	char day[3], med[100];
	strncpy(day, arr, 3);
 8002e72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e76:	2203      	movs	r2, #3
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 f933 	bl	80070e6 <strncpy>
	int start, end, count=-1;
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i=0;i<=strlen(arr);i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	677b      	str	r3, [r7, #116]	; 0x74
 8002e8a:	e02f      	b.n	8002eec <Individual_med+0x84>
	{
		if(arr[i]=='{')
 8002e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b7b      	cmp	r3, #123	; 0x7b
 8002e96:	d104      	bne.n	8002ea2 <Individual_med+0x3a>
		{
			start = i;
 8002e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
			count++;
 8002e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		if(arr[i]=='}')
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b7d      	cmp	r3, #125	; 0x7d
 8002eac:	d11b      	bne.n	8002ee6 <Individual_med+0x7e>
		{
			end = i;
 8002eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb0:	673b      	str	r3, [r7, #112]	; 0x70
			strncpy(med, arr+start, end-start+1);
 8002eb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	18d1      	adds	r1, r2, r3
 8002eb8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 f90d 	bl	80070e6 <strncpy>
			strncpy(target,day,3);
 8002ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	f004 f906 	bl	80070e6 <strncpy>
			strcat(target,med);
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6838      	ldr	r0, [r7, #0]
 8002ee2:	f004 f8f1 	bl	80070c8 <strcat>
	for(int i=0;i<=strlen(arr);i++)
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee8:	3301      	adds	r3, #1
 8002eea:	677b      	str	r3, [r7, #116]	; 0x74
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7fd f97d 	bl	80001ec <strlen>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d2c8      	bcs.n	8002e8c <Individual_med+0x24>
			//strncpy(target[count],day,3);
			//strcat(target[count],med);
		}
	}
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3780      	adds	r7, #128	; 0x80
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <Manage_strings>:

// stores every weekday schedule into 2d array schdule[]
void Manage_strings()
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
	//char weekday[7][3] = { "mon", "tue", "wed", "thu", "fri", "sat", "sun"};
	int pre = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
	//char *pos;	//char *pointer = buffer;
	for(int i=0; i<=strlen(buffer); i++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	e0b2      	b.n	800307a <Manage_strings+0x176>
	{
		//pos = strstr(pointer, weekday[i]);
    	if (buffer[i]=='t' && buffer[i+1]=='u' && buffer[i+2]=='e')
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <Manage_strings+0x1a8>)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b74      	cmp	r3, #116	; 0x74
 8002f1e:	d113      	bne.n	8002f48 <Manage_strings+0x44>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a61      	ldr	r2, [pc, #388]	; (80030ac <Manage_strings+0x1a8>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	2b75      	cmp	r3, #117	; 0x75
 8002f2a:	d10d      	bne.n	8002f48 <Manage_strings+0x44>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	4a5e      	ldr	r2, [pc, #376]	; (80030ac <Manage_strings+0x1a8>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	2b65      	cmp	r3, #101	; 0x65
 8002f36:	d107      	bne.n	8002f48 <Manage_strings+0x44>
    	{
    		strncpy(schedule[0],buffer,i);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	495b      	ldr	r1, [pc, #364]	; (80030ac <Manage_strings+0x1a8>)
 8002f3e:	485c      	ldr	r0, [pc, #368]	; (80030b0 <Manage_strings+0x1ac>)
 8002f40:	f004 f8d1 	bl	80070e6 <strncpy>
    		pre = i;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='w' && buffer[i+1]=='e' && buffer[i+2]=='d')
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <Manage_strings+0x1a8>)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b77      	cmp	r3, #119	; 0x77
 8002f52:	d117      	bne.n	8002f84 <Manage_strings+0x80>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <Manage_strings+0x1a8>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	2b65      	cmp	r3, #101	; 0x65
 8002f5e:	d111      	bne.n	8002f84 <Manage_strings+0x80>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	3302      	adds	r3, #2
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <Manage_strings+0x1a8>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d10b      	bne.n	8002f84 <Manage_strings+0x80>
    	{
    		strncpy(schedule[1],buffer+pre,i-pre);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <Manage_strings+0x1a8>)
 8002f70:	1899      	adds	r1, r3, r2
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	484e      	ldr	r0, [pc, #312]	; (80030b4 <Manage_strings+0x1b0>)
 8002f7c:	f004 f8b3 	bl	80070e6 <strncpy>
    		pre = i;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='t' && buffer[i+1]=='h' && buffer[i+2]=='u')
 8002f84:	4a49      	ldr	r2, [pc, #292]	; (80030ac <Manage_strings+0x1a8>)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b74      	cmp	r3, #116	; 0x74
 8002f8e:	d117      	bne.n	8002fc0 <Manage_strings+0xbc>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a45      	ldr	r2, [pc, #276]	; (80030ac <Manage_strings+0x1a8>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	2b68      	cmp	r3, #104	; 0x68
 8002f9a:	d111      	bne.n	8002fc0 <Manage_strings+0xbc>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <Manage_strings+0x1a8>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	2b75      	cmp	r3, #117	; 0x75
 8002fa6:	d10b      	bne.n	8002fc0 <Manage_strings+0xbc>
    	{
    		strncpy(schedule[2],buffer+pre,i-pre);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a40      	ldr	r2, [pc, #256]	; (80030ac <Manage_strings+0x1a8>)
 8002fac:	1899      	adds	r1, r3, r2
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4840      	ldr	r0, [pc, #256]	; (80030b8 <Manage_strings+0x1b4>)
 8002fb8:	f004 f895 	bl	80070e6 <strncpy>
    		pre = i;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='f' && buffer[i+1]=='r' && buffer[i+2]=='i')
 8002fc0:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <Manage_strings+0x1a8>)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b66      	cmp	r3, #102	; 0x66
 8002fca:	d117      	bne.n	8002ffc <Manage_strings+0xf8>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a36      	ldr	r2, [pc, #216]	; (80030ac <Manage_strings+0x1a8>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	2b72      	cmp	r3, #114	; 0x72
 8002fd6:	d111      	bne.n	8002ffc <Manage_strings+0xf8>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	3302      	adds	r3, #2
 8002fdc:	4a33      	ldr	r2, [pc, #204]	; (80030ac <Manage_strings+0x1a8>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	2b69      	cmp	r3, #105	; 0x69
 8002fe2:	d10b      	bne.n	8002ffc <Manage_strings+0xf8>
    	{
    		strncpy(schedule[3],buffer+pre,i-pre);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a31      	ldr	r2, [pc, #196]	; (80030ac <Manage_strings+0x1a8>)
 8002fe8:	1899      	adds	r1, r3, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4832      	ldr	r0, [pc, #200]	; (80030bc <Manage_strings+0x1b8>)
 8002ff4:	f004 f877 	bl	80070e6 <strncpy>
    		pre = i;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='a' && buffer[i+2]=='t')
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	; (80030ac <Manage_strings+0x1a8>)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b73      	cmp	r3, #115	; 0x73
 8003006:	d117      	bne.n	8003038 <Manage_strings+0x134>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <Manage_strings+0x1a8>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	2b61      	cmp	r3, #97	; 0x61
 8003012:	d111      	bne.n	8003038 <Manage_strings+0x134>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3302      	adds	r3, #2
 8003018:	4a24      	ldr	r2, [pc, #144]	; (80030ac <Manage_strings+0x1a8>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	2b74      	cmp	r3, #116	; 0x74
 800301e:	d10b      	bne.n	8003038 <Manage_strings+0x134>
    	{
    		strncpy(schedule[4],buffer+pre,i-pre);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <Manage_strings+0x1a8>)
 8003024:	1899      	adds	r1, r3, r2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4824      	ldr	r0, [pc, #144]	; (80030c0 <Manage_strings+0x1bc>)
 8003030:	f004 f859 	bl	80070e6 <strncpy>
    		pre = i;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='u' && buffer[i+2]=='n')
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <Manage_strings+0x1a8>)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b73      	cmp	r3, #115	; 0x73
 8003042:	d117      	bne.n	8003074 <Manage_strings+0x170>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <Manage_strings+0x1a8>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	2b75      	cmp	r3, #117	; 0x75
 800304e:	d111      	bne.n	8003074 <Manage_strings+0x170>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3302      	adds	r3, #2
 8003054:	4a15      	ldr	r2, [pc, #84]	; (80030ac <Manage_strings+0x1a8>)
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	2b6e      	cmp	r3, #110	; 0x6e
 800305a:	d10b      	bne.n	8003074 <Manage_strings+0x170>
    	{
    		strncpy(schedule[5],buffer+pre,i-pre);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <Manage_strings+0x1a8>)
 8003060:	1899      	adds	r1, r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	461a      	mov	r2, r3
 800306a:	4816      	ldr	r0, [pc, #88]	; (80030c4 <Manage_strings+0x1c0>)
 800306c:	f004 f83b 	bl	80070e6 <strncpy>
    		pre = i;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	607b      	str	r3, [r7, #4]
	for(int i=0; i<=strlen(buffer); i++)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	603b      	str	r3, [r7, #0]
 800307a:	480c      	ldr	r0, [pc, #48]	; (80030ac <Manage_strings+0x1a8>)
 800307c:	f7fd f8b6 	bl	80001ec <strlen>
 8003080:	4602      	mov	r2, r0
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	429a      	cmp	r2, r3
 8003086:	f4bf af45 	bcs.w	8002f14 <Manage_strings+0x10>
    	}
	}
	strncpy(schedule[6],buffer+pre,strlen(buffer));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a07      	ldr	r2, [pc, #28]	; (80030ac <Manage_strings+0x1a8>)
 800308e:	189c      	adds	r4, r3, r2
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <Manage_strings+0x1a8>)
 8003092:	f7fd f8ab 	bl	80001ec <strlen>
 8003096:	4603      	mov	r3, r0
 8003098:	461a      	mov	r2, r3
 800309a:	4621      	mov	r1, r4
 800309c:	480a      	ldr	r0, [pc, #40]	; (80030c8 <Manage_strings+0x1c4>)
 800309e:	f004 f822 	bl	80070e6 <strncpy>

}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20013320 	.word	0x20013320
 80030b0:	20012da4 	.word	0x20012da4
 80030b4:	20012e6c 	.word	0x20012e6c
 80030b8:	20012f34 	.word	0x20012f34
 80030bc:	20012ffc 	.word	0x20012ffc
 80030c0:	200130c4 	.word	0x200130c4
 80030c4:	2001318c 	.word	0x2001318c
 80030c8:	20013254 	.word	0x20013254

080030cc <letterselect>:
#include "main.h"
#include "graphic.h"
#include "lcd.h"
#include <string.h>

void letterselect(const char letter, int x, int y){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	73fb      	strb	r3, [r7, #15]
	if( letter == 'A' ) {
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b41      	cmp	r3, #65	; 0x41
 80030de:	d108      	bne.n	80030f2 <letterselect+0x26>
		LCD_A(x, y);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	b292      	uxth	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa02 	bl	80004f4 <LCD_A>
	else if ( letter == ':'){
		LCD_Colon(x, y);
	}
	else if( letter == ' ') {
	}
}
 80030f0:	e1ba      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'B' ) {
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b42      	cmp	r3, #66	; 0x42
 80030f6:	d108      	bne.n	800310a <letterselect+0x3e>
		LCD_B(x, y);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	b292      	uxth	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa40 	bl	8000588 <LCD_B>
}
 8003108:	e1ae      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'C' ) {
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b43      	cmp	r3, #67	; 0x43
 800310e:	d108      	bne.n	8003122 <letterselect+0x56>
		LCD_C(x, y);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	b29b      	uxth	r3, r3
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	b292      	uxth	r2, r2
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fa98 	bl	8000650 <LCD_C>
}
 8003120:	e1a2      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'D' ) {
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	2b44      	cmp	r3, #68	; 0x44
 8003126:	d108      	bne.n	800313a <letterselect+0x6e>
		LCD_D(x, y);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	b29b      	uxth	r3, r3
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	b292      	uxth	r2, r2
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fad0 	bl	80006d8 <LCD_D>
}
 8003138:	e196      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'E' ) {
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b45      	cmp	r3, #69	; 0x45
 800313e:	d108      	bne.n	8003152 <letterselect+0x86>
		LCD_E(x, y);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	b29b      	uxth	r3, r3
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	b292      	uxth	r2, r2
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fb16 	bl	800077c <LCD_E>
}
 8003150:	e18a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'F' ) {
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b46      	cmp	r3, #70	; 0x46
 8003156:	d108      	bne.n	800316a <letterselect+0x9e>
		LCD_F(x, y);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	b29b      	uxth	r3, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	b292      	uxth	r2, r2
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fb5a 	bl	800081c <LCD_F>
}
 8003168:	e17e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'G' ) {
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b47      	cmp	r3, #71	; 0x47
 800316e:	d108      	bne.n	8003182 <letterselect+0xb6>
		LCD_G(x, y);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	b29b      	uxth	r3, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	b292      	uxth	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fb98 	bl	80008b0 <LCD_G>
}
 8003180:	e172      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'H' ) {
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b48      	cmp	r3, #72	; 0x48
 8003186:	d108      	bne.n	800319a <letterselect+0xce>
		LCD_H(x, y);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	b29b      	uxth	r3, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	b292      	uxth	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd fbde 	bl	8000954 <LCD_H>
}
 8003198:	e166      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'I' ) {
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b49      	cmp	r3, #73	; 0x49
 800319e:	d108      	bne.n	80031b2 <letterselect+0xe6>
		LCD_I(x, y);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	b292      	uxth	r2, r2
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fc1e 	bl	80009ec <LCD_I>
}
 80031b0:	e15a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'J' ) {
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b4a      	cmp	r3, #74	; 0x4a
 80031b6:	d108      	bne.n	80031ca <letterselect+0xfe>
		LCD_J(x, y);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	b292      	uxth	r2, r2
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fc58 	bl	8000a78 <LCD_J>
}
 80031c8:	e14e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'K' ) {
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b4b      	cmp	r3, #75	; 0x4b
 80031ce:	d108      	bne.n	80031e2 <letterselect+0x116>
		LCD_K(x, y);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	b292      	uxth	r2, r2
 80031d8:	4611      	mov	r1, r2
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fd fc96 	bl	8000b0c <LCD_K>
}
 80031e0:	e142      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'L' ) {
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b4c      	cmp	r3, #76	; 0x4c
 80031e6:	d108      	bne.n	80031fa <letterselect+0x12e>
		LCD_L(x, y);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	b292      	uxth	r2, r2
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd fcf8 	bl	8000be8 <LCD_L>
}
 80031f8:	e136      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'M' ) {
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b4d      	cmp	r3, #77	; 0x4d
 80031fe:	d108      	bne.n	8003212 <letterselect+0x146>
		LCD_M(x, y);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	b29b      	uxth	r3, r3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	b292      	uxth	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fd2c 	bl	8000c68 <LCD_M>
}
 8003210:	e12a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'N' ) {
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b4e      	cmp	r3, #78	; 0x4e
 8003216:	d108      	bne.n	800322a <letterselect+0x15e>
		LCD_N(x, y);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	b29b      	uxth	r3, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	b292      	uxth	r2, r2
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fd84 	bl	8000d30 <LCD_N>
}
 8003228:	e11e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'O' ) {
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b4f      	cmp	r3, #79	; 0x4f
 800322e:	d108      	bne.n	8003242 <letterselect+0x176>
		LCD_O(x, y);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	b29b      	uxth	r3, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	b292      	uxth	r2, r2
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fddc 	bl	8000df8 <LCD_O>
}
 8003240:	e112      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'P' ) {
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b50      	cmp	r3, #80	; 0x50
 8003246:	d108      	bne.n	800325a <letterselect+0x18e>
		LCD_P(x, y);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	b29b      	uxth	r3, r3
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	b292      	uxth	r2, r2
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd fe16 	bl	8000e84 <LCD_P>
}
 8003258:	e106      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'Q' ) {
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b51      	cmp	r3, #81	; 0x51
 800325e:	d108      	bne.n	8003272 <letterselect+0x1a6>
		LCD_Q(x, y);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	b29b      	uxth	r3, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	b292      	uxth	r2, r2
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fe60 	bl	8000f30 <LCD_Q>
}
 8003270:	e0fa      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'R' ) {
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b52      	cmp	r3, #82	; 0x52
 8003276:	d108      	bne.n	800328a <letterselect+0x1be>
		LCD_R(x, y);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	b29b      	uxth	r3, r3
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	b292      	uxth	r2, r2
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fea6 	bl	8000fd4 <LCD_R>
}
 8003288:	e0ee      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'S' ) {
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b53      	cmp	r3, #83	; 0x53
 800328e:	d108      	bne.n	80032a2 <letterselect+0x1d6>
		LCD_S(x, y);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	b29b      	uxth	r3, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	b292      	uxth	r2, r2
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd ff02 	bl	80010a4 <LCD_S>
}
 80032a0:	e0e2      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'T' ) {
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b54      	cmp	r3, #84	; 0x54
 80032a6:	d108      	bne.n	80032ba <letterselect+0x1ee>
		LCD_T(x, y);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	b292      	uxth	r2, r2
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff4e 	bl	8001154 <LCD_T>
}
 80032b8:	e0d6      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'U' ) {
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b55      	cmp	r3, #85	; 0x55
 80032be:	d108      	bne.n	80032d2 <letterselect+0x206>
		LCD_U(x, y);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	b292      	uxth	r2, r2
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd ff86 	bl	80011dc <LCD_U>
}
 80032d0:	e0ca      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'V' ) {
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b56      	cmp	r3, #86	; 0x56
 80032d6:	d108      	bne.n	80032ea <letterselect+0x21e>
		LCD_V(x, y);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	b292      	uxth	r2, r2
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd ffbe 	bl	8001264 <LCD_V>
}
 80032e8:	e0be      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'W' ) {
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	2b57      	cmp	r3, #87	; 0x57
 80032ee:	d108      	bne.n	8003302 <letterselect+0x236>
		LCD_W(x, y);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	b292      	uxth	r2, r2
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe f832 	bl	8001364 <LCD_W>
}
 8003300:	e0b2      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'X' ) {
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b58      	cmp	r3, #88	; 0x58
 8003306:	d108      	bne.n	800331a <letterselect+0x24e>
		LCD_X(x, y);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	b29b      	uxth	r3, r3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	b292      	uxth	r2, r2
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f8c2 	bl	800149c <LCD_X>
}
 8003318:	e0a6      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'Y' ) {
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b59      	cmp	r3, #89	; 0x59
 800331e:	d108      	bne.n	8003332 <letterselect+0x266>
		LCD_Y(x, y);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	b29b      	uxth	r3, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	b292      	uxth	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe f914 	bl	8001558 <LCD_Y>
}
 8003330:	e09a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == 'Z') {
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b5a      	cmp	r3, #90	; 0x5a
 8003336:	d108      	bne.n	800334a <letterselect+0x27e>
		LCD_Z(x, y);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	b29b      	uxth	r3, r3
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	b292      	uxth	r2, r2
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f970 	bl	8001628 <LCD_Z>
}
 8003348:	e08e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '0' ) {
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d108      	bne.n	8003362 <letterselect+0x296>
		LCD_0(x, y);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	b29b      	uxth	r3, r3
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	b292      	uxth	r2, r2
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe f9bc 	bl	80016d8 <LCD_0>
}
 8003360:	e082      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '1' ) {
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b31      	cmp	r3, #49	; 0x31
 8003366:	d108      	bne.n	800337a <letterselect+0x2ae>
		LCD_1(x, y);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	b29b      	uxth	r3, r3
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	b292      	uxth	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe f9f6 	bl	8001764 <LCD_1>
}
 8003378:	e076      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '2' ) {
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b32      	cmp	r3, #50	; 0x32
 800337e:	d108      	bne.n	8003392 <letterselect+0x2c6>
		LCD_2(x, y);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	b29b      	uxth	r3, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	b292      	uxth	r2, r2
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fa2a 	bl	80017e4 <LCD_2>
}
 8003390:	e06a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '3' ) {
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b33      	cmp	r3, #51	; 0x33
 8003396:	d108      	bne.n	80033aa <letterselect+0x2de>
		LCD_3(x, y);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	b29b      	uxth	r3, r3
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	b292      	uxth	r2, r2
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fa70 	bl	8001888 <LCD_3>
}
 80033a8:	e05e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '4' ) {
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b34      	cmp	r3, #52	; 0x34
 80033ae:	d108      	bne.n	80033c2 <letterselect+0x2f6>
		LCD_4(x, y);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	b292      	uxth	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe faae 	bl	800191c <LCD_4>
}
 80033c0:	e052      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '5') {
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b35      	cmp	r3, #53	; 0x35
 80033c6:	d108      	bne.n	80033da <letterselect+0x30e>
		LCD_5(x, y);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	b292      	uxth	r2, r2
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe faee 	bl	80019b4 <LCD_5>
}
 80033d8:	e046      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '6' ) {
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b36      	cmp	r3, #54	; 0x36
 80033de:	d108      	bne.n	80033f2 <letterselect+0x326>
		LCD_6(x, y);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	b292      	uxth	r2, r2
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fb34 	bl	8001a58 <LCD_6>
}
 80033f0:	e03a      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '7' ) {
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b37      	cmp	r3, #55	; 0x37
 80033f6:	d108      	bne.n	800340a <letterselect+0x33e>
		LCD_7(x, y);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	b292      	uxth	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fb78 	bl	8001af8 <LCD_7>
}
 8003408:	e02e      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '8' ) {
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b38      	cmp	r3, #56	; 0x38
 800340e:	d108      	bne.n	8003422 <letterselect+0x356>
		LCD_8(x, y);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	b29b      	uxth	r3, r3
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	b292      	uxth	r2, r2
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fbc8 	bl	8001bb0 <LCD_8>
}
 8003420:	e022      	b.n	8003468 <letterselect+0x39c>
	else if( letter == '9') {
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b39      	cmp	r3, #57	; 0x39
 8003426:	d108      	bne.n	800343a <letterselect+0x36e>
		LCD_9(x, y);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	b29b      	uxth	r3, r3
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	b292      	uxth	r2, r2
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fc08 	bl	8001c48 <LCD_9>
}
 8003438:	e016      	b.n	8003468 <letterselect+0x39c>
	else if ( letter == '.'){
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b2e      	cmp	r3, #46	; 0x2e
 800343e:	d108      	bne.n	8003452 <letterselect+0x386>
		LCD_Period(x,y);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	b29b      	uxth	r3, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	b292      	uxth	r2, r2
 8003448:	4611      	mov	r1, r2
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fc4c 	bl	8001ce8 <LCD_Period>
}
 8003450:	e00a      	b.n	8003468 <letterselect+0x39c>
	else if ( letter == ':'){
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b3a      	cmp	r3, #58	; 0x3a
 8003456:	d107      	bne.n	8003468 <letterselect+0x39c>
		LCD_Colon(x, y);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	b29b      	uxth	r3, r3
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	b292      	uxth	r2, r2
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe fc86 	bl	8001d74 <LCD_Colon>
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <type>:

void type(char const * word, int x, int y){
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < strlen(word); i++){
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e02b      	b.n	80034da <type+0x6a>
		if ( x >= 224 ){
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2bdf      	cmp	r3, #223	; 0xdf
 8003486:	dd04      	ble.n	8003492 <type+0x22>
			x = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
			y = y + 18;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3312      	adds	r3, #18
 8003490:	607b      	str	r3, [r7, #4]
		}
		if ( y >= 304 ){
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8003498:	db03      	blt.n	80034a2 <type+0x32>
			y = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
			x = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
		}
		letterselect(word[i], x, y);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fe0c 	bl	80030cc <letterselect>
		x = (x + 18) % LCD_WIDTH;
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f103 0212 	add.w	r2, r3, #18
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <type+0x84>)
 80034bc:	fb83 1302 	smull	r1, r3, r3, r2
 80034c0:	4413      	add	r3, r2
 80034c2:	11d9      	asrs	r1, r3, #7
 80034c4:	17d3      	asrs	r3, r2, #31
 80034c6:	1ac9      	subs	r1, r1, r3
 80034c8:	460b      	mov	r3, r1
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a5b      	subs	r3, r3, r1
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < strlen(word); i++){
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3301      	adds	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7fc fe86 	bl	80001ec <strlen>
 80034e0:	4602      	mov	r2, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d8cc      	bhi.n	8003482 <type+0x12>
	}
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	88888889 	.word	0x88888889

080034f8 <InitialScreen>:

void InitialScreen(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0xFF);
 80034fc:	20ff      	movs	r0, #255	; 0xff
 80034fe:	f7fe ffb5 	bl	800246c <LCD_ClearScreenLtdc>
	type("WELCOME", 50, 152);
 8003502:	2298      	movs	r2, #152	; 0x98
 8003504:	2132      	movs	r1, #50	; 0x32
 8003506:	4809      	ldr	r0, [pc, #36]	; (800352c <InitialScreen+0x34>)
 8003508:	f7ff ffb2 	bl	8003470 <type>
	type("PAMA" , 85, 294);
 800350c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003510:	2155      	movs	r1, #85	; 0x55
 8003512:	4807      	ldr	r0, [pc, #28]	; (8003530 <InitialScreen+0x38>)
 8003514:	f7ff ffac 	bl	8003470 <type>
	HAL_Delay(3000);
 8003518:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800351c:	f000 fb1a 	bl	8003b54 <HAL_Delay>
	LCD_ClearScreenLtdc(0xFF);
 8003520:	20ff      	movs	r0, #255	; 0xff
 8003522:	f7fe ffa3 	bl	800246c <LCD_ClearScreenLtdc>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08007124 	.word	0x08007124
 8003530:	0800712c 	.word	0x0800712c

08003534 <MenuScreen>:

void MenuScreen(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 8003538:	2005      	movs	r0, #5
 800353a:	f7fe ff97 	bl	800246c <LCD_ClearScreenLtdc>
	type("MENU", 70, 152);
 800353e:	2298      	movs	r2, #152	; 0x98
 8003540:	2146      	movs	r1, #70	; 0x46
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <MenuScreen+0x24>)
 8003544:	f7ff ff94 	bl	8003470 <type>
	type("PAMA" , 85, 294);
 8003548:	f44f 7293 	mov.w	r2, #294	; 0x126
 800354c:	2155      	movs	r1, #85	; 0x55
 800354e:	4803      	ldr	r0, [pc, #12]	; (800355c <MenuScreen+0x28>)
 8003550:	f7ff ff8e 	bl	8003470 <type>
}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}
 8003558:	08007134 	.word	0x08007134
 800355c:	0800712c 	.word	0x0800712c

08003560 <BluetoothScreen>:


void BluetoothScreen(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 8003564:	2005      	movs	r0, #5
 8003566:	f7fe ff81 	bl	800246c <LCD_ClearScreenLtdc>
	type("BLUETOOTH", 40, 50);
 800356a:	2232      	movs	r2, #50	; 0x32
 800356c:	2128      	movs	r1, #40	; 0x28
 800356e:	480a      	ldr	r0, [pc, #40]	; (8003598 <BluetoothScreen+0x38>)
 8003570:	f7ff ff7e 	bl	8003470 <type>
	type("PAIRING", 40, 68);
 8003574:	2244      	movs	r2, #68	; 0x44
 8003576:	2128      	movs	r1, #40	; 0x28
 8003578:	4808      	ldr	r0, [pc, #32]	; (800359c <BluetoothScreen+0x3c>)
 800357a:	f7ff ff79 	bl	8003470 <type>
	//DEMONSTRATION PURPOSES
	type("PAIRING...", 20, 152);
 800357e:	2298      	movs	r2, #152	; 0x98
 8003580:	2114      	movs	r1, #20
 8003582:	4807      	ldr	r0, [pc, #28]	; (80035a0 <BluetoothScreen+0x40>)
 8003584:	f7ff ff74 	bl	8003470 <type>
	type("PAMA" , 85, 294);
 8003588:	f44f 7293 	mov.w	r2, #294	; 0x126
 800358c:	2155      	movs	r1, #85	; 0x55
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <BluetoothScreen+0x44>)
 8003590:	f7ff ff6e 	bl	8003470 <type>
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	0800713c 	.word	0x0800713c
 800359c:	08007148 	.word	0x08007148
 80035a0:	08007150 	.word	0x08007150
 80035a4:	0800712c 	.word	0x0800712c

080035a8 <ScheduleScreen>:

void ScheduleScreen()
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 80035ac:	2005      	movs	r0, #5
 80035ae:	f7fe ff5d 	bl	800246c <LCD_ClearScreenLtdc>
	type("SCHEDULE", 30, 50);
 80035b2:	2232      	movs	r2, #50	; 0x32
 80035b4:	211e      	movs	r1, #30
 80035b6:	4814      	ldr	r0, [pc, #80]	; (8003608 <ScheduleScreen+0x60>)
 80035b8:	f7ff ff5a 	bl	8003470 <type>
	//DEMONSTRATION PURPOSES
	type("TYLENOL", 10, 100);
 80035bc:	2264      	movs	r2, #100	; 0x64
 80035be:	210a      	movs	r1, #10
 80035c0:	4812      	ldr	r0, [pc, #72]	; (800360c <ScheduleScreen+0x64>)
 80035c2:	f7ff ff55 	bl	8003470 <type>
	type("2:30 2", 10, 118);
 80035c6:	2276      	movs	r2, #118	; 0x76
 80035c8:	210a      	movs	r1, #10
 80035ca:	4811      	ldr	r0, [pc, #68]	; (8003610 <ScheduleScreen+0x68>)
 80035cc:	f7ff ff50 	bl	8003470 <type>
	type("SIMVASTATIN", 10, 154);
 80035d0:	229a      	movs	r2, #154	; 0x9a
 80035d2:	210a      	movs	r1, #10
 80035d4:	480f      	ldr	r0, [pc, #60]	; (8003614 <ScheduleScreen+0x6c>)
 80035d6:	f7ff ff4b 	bl	8003470 <type>
	type("3:00 1", 10, 172);
 80035da:	22ac      	movs	r2, #172	; 0xac
 80035dc:	210a      	movs	r1, #10
 80035de:	480e      	ldr	r0, [pc, #56]	; (8003618 <ScheduleScreen+0x70>)
 80035e0:	f7ff ff46 	bl	8003470 <type>
	type("AZITHROMYCIN", 10, 208);
 80035e4:	22d0      	movs	r2, #208	; 0xd0
 80035e6:	210a      	movs	r1, #10
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <ScheduleScreen+0x74>)
 80035ea:	f7ff ff41 	bl	8003470 <type>
	type("3:30 1", 10, 226);
 80035ee:	22e2      	movs	r2, #226	; 0xe2
 80035f0:	210a      	movs	r1, #10
 80035f2:	480b      	ldr	r0, [pc, #44]	; (8003620 <ScheduleScreen+0x78>)
 80035f4:	f7ff ff3c 	bl	8003470 <type>
	type("PAMA", 85, 294);
 80035f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80035fc:	2155      	movs	r1, #85	; 0x55
 80035fe:	4809      	ldr	r0, [pc, #36]	; (8003624 <ScheduleScreen+0x7c>)
 8003600:	f7ff ff36 	bl	8003470 <type>
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	0800715c 	.word	0x0800715c
 800360c:	08007168 	.word	0x08007168
 8003610:	08007170 	.word	0x08007170
 8003614:	08007178 	.word	0x08007178
 8003618:	08007184 	.word	0x08007184
 800361c:	0800718c 	.word	0x0800718c
 8003620:	0800719c 	.word	0x0800719c
 8003624:	0800712c 	.word	0x0800712c

08003628 <DispensedScreen>:

void DispensedScreen()
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 800362c:	2005      	movs	r0, #5
 800362e:	f7fe ff1d 	bl	800246c <LCD_ClearScreenLtdc>
	type("DISPENSE", 50, 50);
 8003632:	2232      	movs	r2, #50	; 0x32
 8003634:	2132      	movs	r1, #50	; 0x32
 8003636:	480f      	ldr	r0, [pc, #60]	; (8003674 <DispensedScreen+0x4c>)
 8003638:	f7ff ff1a 	bl	8003470 <type>
	//DEMONSTRATION PURPOSES
	type("PREPARING:", 25, 100);
 800363c:	2264      	movs	r2, #100	; 0x64
 800363e:	2119      	movs	r1, #25
 8003640:	480d      	ldr	r0, [pc, #52]	; (8003678 <DispensedScreen+0x50>)
 8003642:	f7ff ff15 	bl	8003470 <type>
	type("TYLENOL", 10, 118);
 8003646:	2276      	movs	r2, #118	; 0x76
 8003648:	210a      	movs	r1, #10
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <DispensedScreen+0x54>)
 800364c:	f7ff ff10 	bl	8003470 <type>
	type("SIMVASTATIN", 10, 136);
 8003650:	2288      	movs	r2, #136	; 0x88
 8003652:	210a      	movs	r1, #10
 8003654:	480a      	ldr	r0, [pc, #40]	; (8003680 <DispensedScreen+0x58>)
 8003656:	f7ff ff0b 	bl	8003470 <type>
	type("AZITHROMYCIN", 10, 154);
 800365a:	229a      	movs	r2, #154	; 0x9a
 800365c:	210a      	movs	r1, #10
 800365e:	4809      	ldr	r0, [pc, #36]	; (8003684 <DispensedScreen+0x5c>)
 8003660:	f7ff ff06 	bl	8003470 <type>
	type("PAMA" , 85, 294);
 8003664:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003668:	2155      	movs	r1, #85	; 0x55
 800366a:	4807      	ldr	r0, [pc, #28]	; (8003688 <DispensedScreen+0x60>)
 800366c:	f7ff ff00 	bl	8003470 <type>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	080071a4 	.word	0x080071a4
 8003678:	080071b0 	.word	0x080071b0
 800367c:	08007168 	.word	0x08007168
 8003680:	08007178 	.word	0x08007178
 8003684:	0800718c 	.word	0x0800718c
 8003688:	0800712c 	.word	0x0800712c

0800368c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <MX_SPI5_Init+0x68>)
 8003692:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <MX_SPI5_Init+0x6c>)
 8003694:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <MX_SPI5_Init+0x68>)
 8003698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800369c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036a4:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036da:	220a      	movs	r2, #10
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_SPI5_Init+0x68>)
 80036e0:	f002 f8ca 	bl	8005878 <HAL_SPI_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 80036ea:	f7ff fa73 	bl	8002bd4 <Error_Handler>
  }

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20013790 	.word	0x20013790
 80036f8:	40015000 	.word	0x40015000

080036fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_SPI_MspInit+0x84>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d12c      	bne.n	8003778 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <HAL_SPI_MspInit+0x88>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_SPI_MspInit+0x88>)
 8003728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372c:	6453      	str	r3, [r2, #68]	; 0x44
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_SPI_MspInit+0x88>)
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_SPI_MspInit+0x88>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <HAL_SPI_MspInit+0x88>)
 8003744:	f043 0320 	orr.w	r3, r3, #32
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_SPI_MspInit+0x88>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003756:	f44f 7320 	mov.w	r3, #640	; 0x280
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003768:	2305      	movs	r3, #5
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4619      	mov	r1, r3
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <HAL_SPI_MspInit+0x8c>)
 8003774:	f000 fb46 	bl	8003e04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40015000 	.word	0x40015000
 8003784:	40023800 	.word	0x40023800
 8003788:	40021400 	.word	0x40021400

0800378c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_MspInit+0x4c>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <HAL_MspInit+0x4c>)
 800379c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <HAL_MspInit+0x4c>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_MspInit+0x4c>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_MspInit+0x4c>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_MspInit+0x4c>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
  
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037ca:	2007      	movs	r0, #7
 80037cc:	f000 fab6 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40023800 	.word	0x40023800

080037dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_RTC_MspInit+0x30>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10a      	bne.n	8003804 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_RTC_MspInit+0x34>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2100      	movs	r1, #0
 80037f8:	2029      	movs	r0, #41	; 0x29
 80037fa:	f000 faaa 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80037fe:	2029      	movs	r0, #41	; 0x29
 8003800:	f000 fac3 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40002800 	.word	0x40002800
 8003810:	42470e3c 	.word	0x42470e3c

08003814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <HAL_TIM_Base_MspInit+0x48>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d115      	bne.n	8003852 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a0c      	ldr	r2, [pc, #48]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 8003830:	f043 0310 	orr.w	r3, r3, #16
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_TIM_Base_MspInit+0x4c>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	2036      	movs	r0, #54	; 0x36
 8003848:	f000 fa83 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800384c:	2036      	movs	r0, #54	; 0x36
 800384e:	f000 fa9c 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40001000 	.word	0x40001000
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_UART_MspInit+0x94>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d134      	bne.n	80038f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_UART_MspInit+0x98>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_UART_MspInit+0x98>)
 8003890:	f043 0310 	orr.w	r3, r3, #16
 8003894:	6453      	str	r3, [r2, #68]	; 0x44
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_UART_MspInit+0x98>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_UART_MspInit+0x98>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_UART_MspInit+0x98>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_UART_MspInit+0x98>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 80038be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038cc:	2303      	movs	r3, #3
 80038ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038d0:	2307      	movs	r3, #7
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4619      	mov	r1, r3
 80038da:	4809      	ldr	r0, [pc, #36]	; (8003900 <HAL_UART_MspInit+0x9c>)
 80038dc:	f000 fa92 	bl	8003e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2100      	movs	r1, #0
 80038e4:	2025      	movs	r0, #37	; 0x25
 80038e6:	f000 fa34 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038ea:	2025      	movs	r0, #37	; 0x25
 80038ec:	f000 fa4d 	bl	8003d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038f0:	bf00      	nop
 80038f2:	3728      	adds	r7, #40	; 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000

08003904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003908:	e7fe      	b.n	8003908 <NMI_Handler+0x4>

0800390a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800390e:	e7fe      	b.n	800390e <HardFault_Handler+0x4>

08003910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003914:	e7fe      	b.n	8003914 <MemManage_Handler+0x4>

08003916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800391a:	e7fe      	b.n	800391a <BusFault_Handler+0x4>

0800391c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <UsageFault_Handler+0x4>

08003922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003950:	f000 f8e0 	bl	8003b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index], 1, 10);
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <USART1_IRQHandler+0x30>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <USART1_IRQHandler+0x34>)
 8003964:	18d1      	adds	r1, r2, r3
 8003966:	230a      	movs	r3, #10
 8003968:	2201      	movs	r2, #1
 800396a:	4809      	ldr	r0, [pc, #36]	; (8003990 <USART1_IRQHandler+0x38>)
 800396c:	f002 fcb3 	bl	80062d6 <HAL_UART_Receive>
	buffer_index++;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <USART1_IRQHandler+0x30>)
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <USART1_IRQHandler+0x30>)
 800397a:	801a      	strh	r2, [r3, #0]
		//Process_string(schedule[0]);
		//set_alarm(mtime, mdate, apm);
		//memset(buffer, 0, sizeof(buffer));
	//}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800397c:	4804      	ldr	r0, [pc, #16]	; (8003990 <USART1_IRQHandler+0x38>)
 800397e:	f002 fd51 	bl	8006424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20012c32 	.word	0x20012c32
 800398c:	20013320 	.word	0x20013320
 8003990:	20012cdc 	.word	0x20012cdc

08003994 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <RTC_Alarm_IRQHandler+0x10>)
 800399a:	f001 febf 	bl	800571c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20012d1c 	.word	0x20012d1c

080039a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if(strlen(buffer)>0)
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <TIM6_DAC_IRQHandler+0x3c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <TIM6_DAC_IRQHandler+0x18>
		timer_count++;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <TIM6_DAC_IRQHandler+0x40>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <TIM6_DAC_IRQHandler+0x40>)
 80039be:	801a      	strh	r2, [r3, #0]

	if(timer_count>200){
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <TIM6_DAC_IRQHandler+0x40>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	2bc8      	cmp	r3, #200	; 0xc8
 80039c6:	d908      	bls.n	80039da <TIM6_DAC_IRQHandler+0x32>

		//Arrange_strings(buffer);
		Manage_strings();
 80039c8:	f7ff fa9c 	bl	8002f04 <Manage_strings>
		Individual_med(schedule[0],bufferarr);
 80039cc:	4907      	ldr	r1, [pc, #28]	; (80039ec <TIM6_DAC_IRQHandler+0x44>)
 80039ce:	4808      	ldr	r0, [pc, #32]	; (80039f0 <TIM6_DAC_IRQHandler+0x48>)
 80039d0:	f7ff fa4a 	bl	8002e68 <Individual_med>
		Process_string(bufferarr);
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <TIM6_DAC_IRQHandler+0x44>)
 80039d6:	f7ff f9cb 	bl	8002d70 <Process_string>
		//timer_count = 0;
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039da:	4806      	ldr	r0, [pc, #24]	; (80039f4 <TIM6_DAC_IRQHandler+0x4c>)
 80039dc:	f002 f9c3 	bl	8005d66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20013320 	.word	0x20013320
 80039e8:	20012c30 	.word	0x20012c30
 80039ec:	20013724 	.word	0x20013724
 80039f0:	20012da4 	.word	0x20012da4
 80039f4:	20012d3c 	.word	0x20012d3c

080039f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <SystemInit+0x20>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <SystemInit+0x20>)
 8003a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a20:	480d      	ldr	r0, [pc, #52]	; (8003a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a22:	490e      	ldr	r1, [pc, #56]	; (8003a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a24:	4a0e      	ldr	r2, [pc, #56]	; (8003a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a28:	e002      	b.n	8003a30 <LoopCopyDataInit>

08003a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a2e:	3304      	adds	r3, #4

08003a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a34:	d3f9      	bcc.n	8003a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a36:	4a0b      	ldr	r2, [pc, #44]	; (8003a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a38:	4c0b      	ldr	r4, [pc, #44]	; (8003a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a3c:	e001      	b.n	8003a42 <LoopFillZerobss>

08003a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a40:	3204      	adds	r2, #4

08003a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a44:	d3fb      	bcc.n	8003a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a46:	f7ff ffd7 	bl	80039f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a4a:	f003 fb11 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a4e:	f7fe fed1 	bl	80027f4 <main>
  bx  lr    
 8003a52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a5c:	20012c10 	.word	0x20012c10
  ldr r2, =_sidata
 8003a60:	080075e4 	.word	0x080075e4
  ldr r2, =_sbss
 8003a64:	20012c10 	.word	0x20012c10
  ldr r4, =_ebss
 8003a68:	200137ec 	.word	0x200137ec

08003a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a6c:	e7fe      	b.n	8003a6c <ADC_IRQHandler>
	...

08003a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_Init+0x40>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <HAL_Init+0x40>)
 8003a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_Init+0x40>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_Init+0x40>)
 8003a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_Init+0x40>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_Init+0x40>)
 8003a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a98:	2003      	movs	r0, #3
 8003a9a:	f000 f94f 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f000 f808 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa4:	f7ff fe72 	bl	800378c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00

08003ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_InitTick+0x54>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_InitTick+0x58>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f967 	bl	8003da6 <HAL_SYSTICK_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00e      	b.n	8003b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d80a      	bhi.n	8003afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f000 f92f 	bl	8003d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af4:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <HAL_InitTick+0x5c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20012c04 	.word	0x20012c04
 8003b0c:	20012c0c 	.word	0x20012c0c
 8003b10:	20012c08 	.word	0x20012c08

08003b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x20>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x24>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_IncTick+0x24>)
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20012c0c 	.word	0x20012c0c
 8003b38:	200137e8 	.word	0x200137e8

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_GetTick+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	200137e8 	.word	0x200137e8

08003b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff ffee 	bl	8003b3c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d005      	beq.n	8003b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_Delay+0x44>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7a:	bf00      	nop
 8003b7c:	f7ff ffde 	bl	8003b3c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8f7      	bhi.n	8003b7c <HAL_Delay+0x28>
  {
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20012c0c 	.word	0x20012c0c

08003b9c <__NVIC_SetPriorityGrouping>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	60d3      	str	r3, [r2, #12]
}
 8003bd4:	bf00      	nop
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_GetPriorityGrouping>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	; (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	; (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	; 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	; 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d08:	d301      	bcc.n	8003d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00f      	b.n	8003d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <SysTick_Config+0x40>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d16:	210f      	movs	r1, #15
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f7ff ff8e 	bl	8003c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SysTick_Config+0x40>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <SysTick_Config+0x40>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff29 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d64:	f7ff ff3e 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	6978      	ldr	r0, [r7, #20]
 8003d70:	f7ff ff8e 	bl	8003c90 <NVIC_EncodePriority>
 8003d74:	4602      	mov	r2, r0
 8003d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff ff5d 	bl	8003c3c <__NVIC_SetPriority>
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff31 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff ffa2 	bl	8003cf8 <SysTick_Config>
 8003db4:	4603      	mov	r3, r0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00c      	b.n	8003df6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2205      	movs	r2, #5
 8003de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b089      	sub	sp, #36	; 0x24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e177      	b.n	8004110 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e20:	2201      	movs	r2, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	f040 8166 	bne.w	800410a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d00b      	beq.n	8003e5e <HAL_GPIO_Init+0x5a>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d007      	beq.n	8003e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e52:	2b11      	cmp	r3, #17
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b12      	cmp	r3, #18
 8003e5c:	d130      	bne.n	8003ec0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	2203      	movs	r2, #3
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e94:	2201      	movs	r2, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 0201 	and.w	r2, r3, #1
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	2203      	movs	r2, #3
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0xfc>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b12      	cmp	r3, #18
 8003efe:	d123      	bne.n	8003f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3208      	adds	r2, #8
 8003f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	220f      	movs	r2, #15
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	08da      	lsrs	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3208      	adds	r2, #8
 8003f42:	69b9      	ldr	r1, [r7, #24]
 8003f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0203 	and.w	r2, r3, #3
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80c0 	beq.w	800410a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	4a65      	ldr	r2, [pc, #404]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f98:	6453      	str	r3, [r2, #68]	; 0x44
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_GPIO_Init+0x324>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fa6:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_GPIO_Init+0x328>)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	220f      	movs	r2, #15
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_GPIO_Init+0x32c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d037      	beq.n	8004042 <HAL_GPIO_Init+0x23e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a57      	ldr	r2, [pc, #348]	; (8004134 <HAL_GPIO_Init+0x330>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d031      	beq.n	800403e <HAL_GPIO_Init+0x23a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a56      	ldr	r2, [pc, #344]	; (8004138 <HAL_GPIO_Init+0x334>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02b      	beq.n	800403a <HAL_GPIO_Init+0x236>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_GPIO_Init+0x338>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d025      	beq.n	8004036 <HAL_GPIO_Init+0x232>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_GPIO_Init+0x33c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_GPIO_Init+0x22e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a53      	ldr	r2, [pc, #332]	; (8004144 <HAL_GPIO_Init+0x340>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d019      	beq.n	800402e <HAL_GPIO_Init+0x22a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_GPIO_Init+0x344>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0x226>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a51      	ldr	r2, [pc, #324]	; (800414c <HAL_GPIO_Init+0x348>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_GPIO_Init+0x222>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a50      	ldr	r2, [pc, #320]	; (8004150 <HAL_GPIO_Init+0x34c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x21e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <HAL_GPIO_Init+0x350>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_GPIO_Init+0x21a>
 800401a:	2309      	movs	r3, #9
 800401c:	e012      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800401e:	230a      	movs	r3, #10
 8004020:	e010      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004022:	2308      	movs	r3, #8
 8004024:	e00e      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004026:	2307      	movs	r3, #7
 8004028:	e00c      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800402a:	2306      	movs	r3, #6
 800402c:	e00a      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800402e:	2305      	movs	r3, #5
 8004030:	e008      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004032:	2304      	movs	r3, #4
 8004034:	e006      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004036:	2303      	movs	r3, #3
 8004038:	e004      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800403a:	2302      	movs	r3, #2
 800403c:	e002      	b.n	8004044 <HAL_GPIO_Init+0x240>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_GPIO_Init+0x240>
 8004042:	2300      	movs	r3, #0
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	f002 0203 	and.w	r2, r2, #3
 800404a:	0092      	lsls	r2, r2, #2
 800404c:	4093      	lsls	r3, r2
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004054:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_GPIO_Init+0x328>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	3302      	adds	r3, #2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004086:	4a34      	ldr	r2, [pc, #208]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <HAL_GPIO_Init+0x354>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b0:	4a29      	ldr	r2, [pc, #164]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_GPIO_Init+0x354>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <HAL_GPIO_Init+0x354>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	f67f ae84 	bls.w	8003e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40013800 	.word	0x40013800
 8004130:	40020000 	.word	0x40020000
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800
 800413c:	40020c00 	.word	0x40020c00
 8004140:	40021000 	.word	0x40021000
 8004144:	40021400 	.word	0x40021400
 8004148:	40021800 	.word	0x40021800
 800414c:	40021c00 	.word	0x40021c00
 8004150:	40022000 	.word	0x40022000
 8004154:	40022400 	.word	0x40022400
 8004158:	40013c00 	.word	0x40013c00

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004178:	e003      	b.n	8004182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	041a      	lsls	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	619a      	str	r2, [r3, #24]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f806 	bl	80041c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0bf      	b.n	8004372 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f9c2 	bl	8002590 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004222:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004238:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6899      	ldr	r1, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_LTDC_Init+0x1a4>)
 8004254:	400b      	ands	r3, r1
 8004256:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	041b      	lsls	r3, r3, #16
 800425e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68d9      	ldr	r1, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_LTDC_Init+0x1a4>)
 8004282:	400b      	ands	r3, r1
 8004284:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68d9      	ldr	r1, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6919      	ldr	r1, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_LTDC_Init+0x1a4>)
 80042b0:	400b      	ands	r3, r1
 80042b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6919      	ldr	r1, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6959      	ldr	r1, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_LTDC_Init+0x1a4>)
 80042de:	400b      	ands	r3, r1
 80042e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6959      	ldr	r1, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0206 	orr.w	r2, r2, #6
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	f000f800 	.word	0xf000f800

08004380 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_LTDC_ConfigLayer+0x1a>
 8004396:	2302      	movs	r3, #2
 8004398:	e02c      	b.n	80043f4 <HAL_LTDC_ConfigLayer+0x74>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2202      	movs	r2, #2
 80043a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2134      	movs	r1, #52	; 0x34
 80043b0:	fb01 f303 	mul.w	r3, r1, r3
 80043b4:	4413      	add	r3, r2
 80043b6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
 80043c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f923 	bl	8004620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2201      	movs	r2, #1
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bdb0      	pop	{r4, r5, r7, pc}

080043fc <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_LTDC_ConfigCLUT+0x28>
 8004420:	2302      	movs	r3, #2
 8004422:	e059      	b.n	80044d8 <HAL_LTDC_ConfigCLUT+0xdc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	e041      	b.n	80044be <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2134      	movs	r1, #52	; 0x34
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	3348      	adds	r3, #72	; 0x48
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d114      	bne.n	8004478 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	061a      	lsls	r2, r3, #24
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	431a      	orrs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004468:	431a      	orrs	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004472:	4313      	orrs	r3, r2
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	e010      	b.n	800449a <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	061a      	lsls	r2, r3, #24
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	431a      	orrs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800448c:	431a      	orrs	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004496:	4313      	orrs	r3, r2
 8004498:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3304      	adds	r3, #4
 800449e:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4413      	add	r3, r2
 80044b0:	3384      	adds	r3, #132	; 0x84
 80044b2:	461a      	mov	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	3301      	adds	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3b9      	bcc.n	800443a <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3724      	adds	r7, #36	; 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_LTDC_EnableCLUT+0x18>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e026      	b.n	800454a <HAL_LTDC_EnableCLUT+0x66>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	01db      	lsls	r3, r3, #7
 8004516:	4413      	add	r3, r2
 8004518:	3384      	adds	r3, #132	; 0x84
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	4611      	mov	r1, r2
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	01d2      	lsls	r2, r2, #7
 8004526:	440a      	add	r2, r1
 8004528:	3284      	adds	r2, #132	; 0x84
 800452a:	f043 0310 	orr.w	r3, r3, #16
 800452e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b086      	sub	sp, #24
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_LTDC_SetAddress+0x1a>
 800456c:	2302      	movs	r3, #2
 800456e:	e024      	b.n	80045ba <HAL_LTDC_SetAddress+0x64>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2234      	movs	r2, #52	; 0x34
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	3338      	adds	r3, #56	; 0x38
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f840 	bl	8004620 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_LTDC_Reload+0x18>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e01c      	b.n	8004614 <HAL_LTDC_Reload+0x52>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0208 	orr.w	r2, r2, #8
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004648:	4413      	add	r3, r2
 800464a:	041b      	lsls	r3, r3, #16
 800464c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	01db      	lsls	r3, r3, #7
 8004658:	4413      	add	r3, r2
 800465a:	3384      	adds	r3, #132	; 0x84
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	4611      	mov	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	01d2      	lsls	r2, r2, #7
 8004668:	440a      	add	r2, r1
 800466a:	3284      	adds	r2, #132	; 0x84
 800466c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004670:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004682:	4413      	add	r3, r2
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	01db      	lsls	r3, r3, #7
 8004690:	440b      	add	r3, r1
 8004692:	3384      	adds	r3, #132	; 0x84
 8004694:	4619      	mov	r1, r3
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046aa:	4413      	add	r3, r2
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	01db      	lsls	r3, r3, #7
 80046ba:	4413      	add	r3, r2
 80046bc:	3384      	adds	r3, #132	; 0x84
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	4611      	mov	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	01d2      	lsls	r2, r2, #7
 80046ca:	440a      	add	r2, r1
 80046cc:	3284      	adds	r2, #132	; 0x84
 80046ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046e2:	4413      	add	r3, r2
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4619      	mov	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	01db      	lsls	r3, r3, #7
 80046f0:	440b      	add	r3, r1
 80046f2:	3384      	adds	r3, #132	; 0x84
 80046f4:	4619      	mov	r1, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	; 0x84
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	4611      	mov	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	01d2      	lsls	r2, r2, #7
 8004716:	440a      	add	r2, r1
 8004718:	3284      	adds	r2, #132	; 0x84
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	01db      	lsls	r3, r3, #7
 800472a:	4413      	add	r3, r2
 800472c:	3384      	adds	r3, #132	; 0x84
 800472e:	461a      	mov	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	4413      	add	r3, r2
 800475e:	3384      	adds	r3, #132	; 0x84
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4413      	add	r3, r2
 800476e:	3384      	adds	r3, #132	; 0x84
 8004770:	461a      	mov	r2, r3
 8004772:	2300      	movs	r3, #0
 8004774:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800477c:	461a      	mov	r2, r3
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	431a      	orrs	r2, r3
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	431a      	orrs	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4619      	mov	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	01db      	lsls	r3, r3, #7
 8004790:	440b      	add	r3, r1
 8004792:	3384      	adds	r3, #132	; 0x84
 8004794:	4619      	mov	r1, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	4413      	add	r3, r2
 80047a8:	3384      	adds	r3, #132	; 0x84
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	4611      	mov	r1, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	01d2      	lsls	r2, r2, #7
 80047b6:	440a      	add	r2, r1
 80047b8:	3284      	adds	r2, #132	; 0x84
 80047ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	01db      	lsls	r3, r3, #7
 80047ca:	4413      	add	r3, r2
 80047cc:	3384      	adds	r3, #132	; 0x84
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	01db      	lsls	r3, r3, #7
 80047e0:	4413      	add	r3, r2
 80047e2:	3384      	adds	r3, #132	; 0x84
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	4611      	mov	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	01d2      	lsls	r2, r2, #7
 80047f0:	440a      	add	r2, r1
 80047f2:	3284      	adds	r2, #132	; 0x84
 80047f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	68f9      	ldr	r1, [r7, #12]
 8004808:	6809      	ldr	r1, [r1, #0]
 800480a:	4608      	mov	r0, r1
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	01c9      	lsls	r1, r1, #7
 8004810:	4401      	add	r1, r0
 8004812:	3184      	adds	r1, #132	; 0x84
 8004814:	4313      	orrs	r3, r2
 8004816:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	01db      	lsls	r3, r3, #7
 8004822:	4413      	add	r3, r2
 8004824:	3384      	adds	r3, #132	; 0x84
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	01db      	lsls	r3, r3, #7
 8004832:	4413      	add	r3, r2
 8004834:	3384      	adds	r3, #132	; 0x84
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	01db      	lsls	r3, r3, #7
 8004846:	4413      	add	r3, r2
 8004848:	3384      	adds	r3, #132	; 0x84
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 800485a:	2304      	movs	r3, #4
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e01b      	b.n	8004898 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004868:	2303      	movs	r3, #3
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e014      	b.n	8004898 <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b04      	cmp	r3, #4
 8004874:	d00b      	beq.n	800488e <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800487a:	2b02      	cmp	r3, #2
 800487c:	d007      	beq.n	800488e <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004882:	2b03      	cmp	r3, #3
 8004884:	d003      	beq.n	800488e <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800488a:	2b07      	cmp	r3, #7
 800488c:	d102      	bne.n	8004894 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 800488e:	2302      	movs	r3, #2
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e001      	b.n	8004898 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	01db      	lsls	r3, r3, #7
 80048a2:	4413      	add	r3, r2
 80048a4:	3384      	adds	r3, #132	; 0x84
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	4611      	mov	r1, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	01d2      	lsls	r2, r2, #7
 80048b2:	440a      	add	r2, r1
 80048b4:	3284      	adds	r2, #132	; 0x84
 80048b6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	041a      	lsls	r2, r3, #16
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1acb      	subs	r3, r1, r3
 80048d2:	69f9      	ldr	r1, [r7, #28]
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	3303      	adds	r3, #3
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	6809      	ldr	r1, [r1, #0]
 80048de:	4608      	mov	r0, r1
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	01c9      	lsls	r1, r1, #7
 80048e4:	4401      	add	r1, r0
 80048e6:	3184      	adds	r1, #132	; 0x84
 80048e8:	4313      	orrs	r3, r2
 80048ea:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	3384      	adds	r3, #132	; 0x84
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	4611      	mov	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	01d2      	lsls	r2, r2, #7
 8004906:	440a      	add	r2, r1
 8004908:	3284      	adds	r2, #132	; 0x84
 800490a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800490e:	f023 0307 	bic.w	r3, r3, #7
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	01db      	lsls	r3, r3, #7
 800491e:	4413      	add	r3, r2
 8004920:	3384      	adds	r3, #132	; 0x84
 8004922:	461a      	mov	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	4413      	add	r3, r2
 8004936:	3384      	adds	r3, #132	; 0x84
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4611      	mov	r1, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	01d2      	lsls	r2, r2, #7
 8004944:	440a      	add	r2, r1
 8004946:	3284      	adds	r2, #132	; 0x84
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]
}
 800494e:	bf00      	nop
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_PWREx_EnableOverDrive+0x90>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6413      	str	r3, [r2, #64]	; 0x40
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004988:	f7ff f8d8 	bl	8003b3c <HAL_GetTick>
 800498c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800498e:	e009      	b.n	80049a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004990:	f7ff f8d4 	bl	8003b3c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800499e:	d901      	bls.n	80049a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e01f      	b.n	80049e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d1ee      	bne.n	8004990 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b8:	f7ff f8c0 	bl	8003b3c <HAL_GetTick>
 80049bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049be:	e009      	b.n	80049d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049c0:	f7ff f8bc 	bl	8003b3c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ce:	d901      	bls.n	80049d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e007      	b.n	80049e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e0:	d1ee      	bne.n	80049c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	420e0040 	.word	0x420e0040
 80049f4:	40007000 	.word	0x40007000
 80049f8:	420e0044 	.word	0x420e0044

080049fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e25b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d075      	beq.n	8004b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a1a:	4ba3      	ldr	r3, [pc, #652]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 030c 	and.w	r3, r3, #12
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d00c      	beq.n	8004a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a26:	4ba0      	ldr	r3, [pc, #640]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d112      	bne.n	8004a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a32:	4b9d      	ldr	r3, [pc, #628]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3e:	d10b      	bne.n	8004a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	4b99      	ldr	r3, [pc, #612]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d05b      	beq.n	8004b04 <HAL_RCC_OscConfig+0x108>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d157      	bne.n	8004b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e236      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a60:	d106      	bne.n	8004a70 <HAL_RCC_OscConfig+0x74>
 8004a62:	4b91      	ldr	r3, [pc, #580]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a90      	ldr	r2, [pc, #576]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e01d      	b.n	8004aac <HAL_RCC_OscConfig+0xb0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x98>
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a8a      	ldr	r2, [pc, #552]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b88      	ldr	r3, [pc, #544]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a87      	ldr	r2, [pc, #540]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0xb0>
 8004a94:	4b84      	ldr	r3, [pc, #528]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a83      	ldr	r2, [pc, #524]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7ff f842 	bl	8003b3c <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abc:	f7ff f83e 	bl	8003b3c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1fb      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b76      	ldr	r3, [pc, #472]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0xc0>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7ff f82e 	bl	8003b3c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7ff f82a 	bl	8003b3c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1e7      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	4b6c      	ldr	r3, [pc, #432]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0xe8>
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d063      	beq.n	8004bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b12:	4b65      	ldr	r3, [pc, #404]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1e:	4b62      	ldr	r3, [pc, #392]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d11c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	4b5c      	ldr	r3, [pc, #368]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x152>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e1bb      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4952      	ldr	r1, [pc, #328]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	e03a      	b.n	8004bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <HAL_RCC_OscConfig+0x2b0>)
 8004b6e:	2201      	movs	r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b72:	f7fe ffe3 	bl	8003b3c <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b7a:	f7fe ffdf 	bl	8003b3c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e19c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b43      	ldr	r3, [pc, #268]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4940      	ldr	r1, [pc, #256]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]
 8004bac:	e015      	b.n	8004bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bae:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_RCC_OscConfig+0x2b0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe ffc2 	bl	8003b3c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fe ffbe 	bl	8003b3c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e17b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d030      	beq.n	8004c48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <HAL_RCC_OscConfig+0x2b4>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fe ffa2 	bl	8003b3c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bfc:	f7fe ff9e 	bl	8003b3c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e15b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x200>
 8004c1a:	e015      	b.n	8004c48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_OscConfig+0x2b4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fe ff8b 	bl	8003b3c <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c2a:	f7fe ff87 	bl	8003b3c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e144      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80a0 	beq.w	8004d96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5a:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6413      	str	r3, [r2, #64]	; 0x40
 8004c76:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c82:	2301      	movs	r3, #1
 8004c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_OscConfig+0x2b8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_RCC_OscConfig+0x2b8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_RCC_OscConfig+0x2b8>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9e:	f7fe ff4d 	bl	8003b3c <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	e011      	b.n	8004cca <HAL_RCC_OscConfig+0x2ce>
 8004ca6:	bf00      	nop
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	42470000 	.word	0x42470000
 8004cb0:	42470e80 	.word	0x42470e80
 8004cb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb8:	f7fe ff40 	bl	8003b3c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e0fd      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <HAL_RCC_OscConfig+0x4d4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d106      	bne.n	8004cec <HAL_RCC_OscConfig+0x2f0>
 8004cde:	4b7d      	ldr	r3, [pc, #500]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a7c      	ldr	r2, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cea:	e01c      	b.n	8004d26 <HAL_RCC_OscConfig+0x32a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b05      	cmp	r3, #5
 8004cf2:	d10c      	bne.n	8004d0e <HAL_RCC_OscConfig+0x312>
 8004cf4:	4b77      	ldr	r3, [pc, #476]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	4a76      	ldr	r2, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004cfa:	f043 0304 	orr.w	r3, r3, #4
 8004cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004d00:	4b74      	ldr	r3, [pc, #464]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a73      	ldr	r2, [pc, #460]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0c:	e00b      	b.n	8004d26 <HAL_RCC_OscConfig+0x32a>
 8004d0e:	4b71      	ldr	r3, [pc, #452]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a70      	ldr	r2, [pc, #448]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1a:	4b6e      	ldr	r3, [pc, #440]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	4a6d      	ldr	r2, [pc, #436]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d015      	beq.n	8004d5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fe ff05 	bl	8003b3c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fe ff01 	bl	8003b3c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0bc      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	4b61      	ldr	r3, [pc, #388]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ee      	beq.n	8004d36 <HAL_RCC_OscConfig+0x33a>
 8004d58:	e014      	b.n	8004d84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5a:	f7fe feef 	bl	8003b3c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fe feeb 	bl	8003b3c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0a6      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d78:	4b56      	ldr	r3, [pc, #344]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1ee      	bne.n	8004d62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d105      	bne.n	8004d96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8a:	4b52      	ldr	r3, [pc, #328]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	4a51      	ldr	r2, [pc, #324]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8092 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004da0:	4b4c      	ldr	r3, [pc, #304]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d05c      	beq.n	8004e66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d141      	bne.n	8004e38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db4:	4b48      	ldr	r3, [pc, #288]	; (8004ed8 <HAL_RCC_OscConfig+0x4dc>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fe febf 	bl	8003b3c <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fe febb 	bl	8003b3c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e078      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd4:	4b3f      	ldr	r3, [pc, #252]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f0      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	019b      	lsls	r3, r3, #6
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	4933      	ldr	r1, [pc, #204]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0a:	4b33      	ldr	r3, [pc, #204]	; (8004ed8 <HAL_RCC_OscConfig+0x4dc>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e10:	f7fe fe94 	bl	8003b3c <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fe fe90 	bl	8003b3c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e04d      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x41c>
 8004e36:	e045      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e38:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCC_OscConfig+0x4dc>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3e:	f7fe fe7d 	bl	8003b3c <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e46:	f7fe fe79 	bl	8003b3c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e036      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1f0      	bne.n	8004e46 <HAL_RCC_OscConfig+0x44a>
 8004e64:	e02e      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e029      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCC_OscConfig+0x4d8>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d115      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40007000 	.word	0x40007000
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470060 	.word	0x42470060

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0cc      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d90c      	bls.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b65      	ldr	r3, [pc, #404]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f06:	4b63      	ldr	r3, [pc, #396]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0b8      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a58      	ldr	r2, [pc, #352]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f48:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a52      	ldr	r2, [pc, #328]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f54:	4b50      	ldr	r3, [pc, #320]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	494d      	ldr	r1, [pc, #308]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d044      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d119      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e07f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	4b3f      	ldr	r3, [pc, #252]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e06f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e067      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f023 0203 	bic.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4934      	ldr	r1, [pc, #208]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fcc:	f7fe fdb6 	bl	8003b3c <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd4:	f7fe fdb2 	bl	8003b3c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e04f      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 020c 	and.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d1eb      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b25      	ldr	r3, [pc, #148]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d20c      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_RCC_ClockConfig+0x1b8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e032      	b.n	800508a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4916      	ldr	r1, [pc, #88]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504e:	4b12      	ldr	r3, [pc, #72]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	490e      	ldr	r1, [pc, #56]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005062:	f000 f821 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005066:	4602      	mov	r2, r0
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	490a      	ldr	r1, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1c0>)
 8005074:	5ccb      	ldrb	r3, [r1, r3]
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fd16 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40023c00 	.word	0x40023c00
 8005098:	40023800 	.word	0x40023800
 800509c:	080075bc 	.word	0x080075bc
 80050a0:	20012c04 	.word	0x20012c04
 80050a4:	20012c08 	.word	0x20012c08

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ae:	2100      	movs	r1, #0
 80050b0:	6079      	str	r1, [r7, #4]
 80050b2:	2100      	movs	r1, #0
 80050b4:	60f9      	str	r1, [r7, #12]
 80050b6:	2100      	movs	r1, #0
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050ba:	2100      	movs	r1, #0
 80050bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050be:	4952      	ldr	r1, [pc, #328]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80050c0:	6889      	ldr	r1, [r1, #8]
 80050c2:	f001 010c 	and.w	r1, r1, #12
 80050c6:	2908      	cmp	r1, #8
 80050c8:	d00d      	beq.n	80050e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80050ca:	2908      	cmp	r1, #8
 80050cc:	f200 8094 	bhi.w	80051f8 <HAL_RCC_GetSysClockFreq+0x150>
 80050d0:	2900      	cmp	r1, #0
 80050d2:	d002      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x32>
 80050d4:	2904      	cmp	r1, #4
 80050d6:	d003      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x38>
 80050d8:	e08e      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050da:	4b4c      	ldr	r3, [pc, #304]	; (800520c <HAL_RCC_GetSysClockFreq+0x164>)
 80050dc:	60bb      	str	r3, [r7, #8]
       break;
 80050de:	e08e      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCC_GetSysClockFreq+0x168>)
 80050e2:	60bb      	str	r3, [r7, #8]
      break;
 80050e4:	e08b      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e6:	4948      	ldr	r1, [pc, #288]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80050e8:	6849      	ldr	r1, [r1, #4]
 80050ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80050ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f0:	4945      	ldr	r1, [pc, #276]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80050f2:	6849      	ldr	r1, [r1, #4]
 80050f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80050f8:	2900      	cmp	r1, #0
 80050fa:	d024      	beq.n	8005146 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fc:	4942      	ldr	r1, [pc, #264]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80050fe:	6849      	ldr	r1, [r1, #4]
 8005100:	0989      	lsrs	r1, r1, #6
 8005102:	4608      	mov	r0, r1
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	f240 14ff 	movw	r4, #511	; 0x1ff
 800510c:	f04f 0500 	mov.w	r5, #0
 8005110:	ea00 0204 	and.w	r2, r0, r4
 8005114:	ea01 0305 	and.w	r3, r1, r5
 8005118:	493d      	ldr	r1, [pc, #244]	; (8005210 <HAL_RCC_GetSysClockFreq+0x168>)
 800511a:	fb01 f003 	mul.w	r0, r1, r3
 800511e:	2100      	movs	r1, #0
 8005120:	fb01 f102 	mul.w	r1, r1, r2
 8005124:	1844      	adds	r4, r0, r1
 8005126:	493a      	ldr	r1, [pc, #232]	; (8005210 <HAL_RCC_GetSysClockFreq+0x168>)
 8005128:	fba2 0101 	umull	r0, r1, r2, r1
 800512c:	1863      	adds	r3, r4, r1
 800512e:	4619      	mov	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	461a      	mov	r2, r3
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	f7fb f860 	bl	80001fc <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4613      	mov	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e04a      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005146:	4b30      	ldr	r3, [pc, #192]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	461a      	mov	r2, r3
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	ea02 0400 	and.w	r4, r2, r0
 800515e:	ea03 0501 	and.w	r5, r3, r1
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	014b      	lsls	r3, r1, #5
 8005170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005174:	0142      	lsls	r2, r0, #5
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	1b00      	subs	r0, r0, r4
 800517c:	eb61 0105 	sbc.w	r1, r1, r5
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	018b      	lsls	r3, r1, #6
 800518a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800518e:	0182      	lsls	r2, r0, #6
 8005190:	1a12      	subs	r2, r2, r0
 8005192:	eb63 0301 	sbc.w	r3, r3, r1
 8005196:	f04f 0000 	mov.w	r0, #0
 800519a:	f04f 0100 	mov.w	r1, #0
 800519e:	00d9      	lsls	r1, r3, #3
 80051a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051a4:	00d0      	lsls	r0, r2, #3
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	1912      	adds	r2, r2, r4
 80051ac:	eb45 0303 	adc.w	r3, r5, r3
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	0299      	lsls	r1, r3, #10
 80051ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051be:	0290      	lsls	r0, r2, #10
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	f7fb f814 	bl	80001fc <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_GetSysClockFreq+0x160>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	3301      	adds	r3, #1
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	60bb      	str	r3, [r7, #8]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <HAL_RCC_GetSysClockFreq+0x164>)
 80051fa:	60bb      	str	r3, [r7, #8]
      break;
 80051fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051fe:	68bb      	ldr	r3, [r7, #8]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bdb0      	pop	{r4, r5, r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	00f42400 	.word	0x00f42400
 8005210:	017d7840 	.word	0x017d7840

08005214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCC_GetHCLKFreq+0x14>)
 800521a:	681b      	ldr	r3, [r3, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20012c04 	.word	0x20012c04

0800522c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005230:	f7ff fff0 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	0a9b      	lsrs	r3, r3, #10
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	4903      	ldr	r1, [pc, #12]	; (8005250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005248:	4618      	mov	r0, r3
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	080075cc 	.word	0x080075cc

08005254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005258:	f7ff ffdc 	bl	8005214 <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	0b5b      	lsrs	r3, r3, #13
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	; (8005278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40023800 	.word	0x40023800
 8005278:	080075cc 	.word	0x080075cc

0800527c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d075      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052b0:	4bad      	ldr	r3, [pc, #692]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b6:	f7fe fc41 	bl	8003b3c <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052be:	f7fe fc3d 	bl	8003b3c <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e18b      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052d0:	4ba6      	ldr	r3, [pc, #664]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	019a      	lsls	r2, r3, #6
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	071b      	lsls	r3, r3, #28
 80052f4:	499d      	ldr	r1, [pc, #628]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005308:	4b98      	ldr	r3, [pc, #608]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530e:	0f1b      	lsrs	r3, r3, #28
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	019a      	lsls	r2, r3, #6
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	061b      	lsls	r3, r3, #24
 8005322:	431a      	orrs	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	071b      	lsls	r3, r3, #28
 8005328:	4990      	ldr	r1, [pc, #576]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005330:	4b8e      	ldr	r3, [pc, #568]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005336:	f023 021f 	bic.w	r2, r3, #31
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	3b01      	subs	r3, #1
 8005340:	498a      	ldr	r1, [pc, #552]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	019a      	lsls	r2, r3, #6
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	061b      	lsls	r3, r3, #24
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	071b      	lsls	r3, r3, #28
 8005368:	4980      	ldr	r1, [pc, #512]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005370:	4b7d      	ldr	r3, [pc, #500]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005376:	f7fe fbe1 	bl	8003b3c <HAL_GetTick>
 800537a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800537e:	f7fe fbdd 	bl	8003b3c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e12b      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005390:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d079      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053b4:	4b6e      	ldr	r3, [pc, #440]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053ba:	f7fe fbbf 	bl	8003b3c <HAL_GetTick>
 80053be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053c2:	f7fe fbbb 	bl	8003b3c <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e109      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053d4:	4b65      	ldr	r3, [pc, #404]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e0:	d0ef      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d020      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ee:	4b5f      	ldr	r3, [pc, #380]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	0f1b      	lsrs	r3, r3, #28
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	019a      	lsls	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	061b      	lsls	r3, r3, #24
 8005408:	431a      	orrs	r2, r3
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	071b      	lsls	r3, r3, #28
 800540e:	4957      	ldr	r1, [pc, #348]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005416:	4b55      	ldr	r3, [pc, #340]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	3b01      	subs	r3, #1
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	4950      	ldr	r1, [pc, #320]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01e      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	0e1b      	lsrs	r3, r3, #24
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	019a      	lsls	r2, r3, #6
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	061b      	lsls	r3, r3, #24
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	071b      	lsls	r3, r3, #28
 800545c:	4943      	ldr	r1, [pc, #268]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005464:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800546a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	493e      	ldr	r1, [pc, #248]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800547a:	4b3d      	ldr	r3, [pc, #244]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005480:	f7fe fb5c 	bl	8003b3c <HAL_GetTick>
 8005484:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005488:	f7fe fb58 	bl	8003b3c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0a6      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a6:	d1ef      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 808d 	beq.w	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b2c      	ldr	r3, [pc, #176]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a2b      	ldr	r2, [pc, #172]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054d2:	4b28      	ldr	r3, [pc, #160]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fe fb2d 	bl	8003b3c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fe fb29 	bl	8003b3c <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e077      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d039      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d032      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005538:	4a0c      	ldr	r2, [pc, #48]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d11e      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800554a:	f7fe faf7 	bl	8003b3c <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e014      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fe faf3 	bl	8003b3c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d90b      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e03f      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005568:	42470068 	.word	0x42470068
 800556c:	40023800 	.word	0x40023800
 8005570:	42470070 	.word	0x42470070
 8005574:	40007000 	.word	0x40007000
 8005578:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557c:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0e4      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005594:	d10d      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055aa:	4911      	ldr	r1, [pc, #68]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]
 80055b0:	e005      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x342>
 80055b2:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a0e      	ldr	r2, [pc, #56]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055bc:	6093      	str	r3, [r2, #8]
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ca:	4909      	ldr	r1, [pc, #36]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40023800 	.word	0x40023800
 80055f4:	424711e0 	.word	0x424711e0

080055f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e083      	b.n	8005712 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	7f5b      	ldrb	r3, [r3, #29]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe f8de 	bl	80037dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	22ca      	movs	r2, #202	; 0xca
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2253      	movs	r2, #83	; 0x53
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f8e8 	bl	800580c <RTC_EnterInitMode>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d008      	beq.n	8005654 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	22ff      	movs	r2, #255	; 0xff
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2204      	movs	r2, #4
 800564e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e05e      	b.n	8005712 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005666:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6899      	ldr	r1, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68d2      	ldr	r2, [r2, #12]
 800568e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6919      	ldr	r1, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	041a      	lsls	r2, r3, #16
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10e      	bne.n	80056e0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f87a 	bl	80057bc <HAL_RTC_WaitForSynchro>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	22ff      	movs	r2, #255	; 0xff
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2204      	movs	r2, #4
 80056da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e018      	b.n	8005712 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	22ff      	movs	r2, #255	; 0xff
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d012      	beq.n	8005758 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f831 	bl	80057a8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005756:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d012      	beq.n	800578c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f875 	bl	8005864 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f462 7220 	orn	r2, r2, #640	; 0x280
 800578a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <HAL_RTC_AlarmIRQHandler+0x88>)
 800578e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005792:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	775a      	strb	r2, [r3, #29]
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40013c00 	.word	0x40013c00

080057a8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057d8:	f7fe f9b0 	bl	8003b3c <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057de:	e009      	b.n	80057f4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057e0:	f7fe f9ac 	bl	8003b3c <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ee:	d901      	bls.n	80057f4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e007      	b.n	8005804 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0320 	and.w	r3, r3, #32
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0ee      	beq.n	80057e0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d119      	bne.n	800585a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f04f 32ff 	mov.w	r2, #4294967295
 800582e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005830:	f7fe f984 	bl	8003b3c <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005836:	e009      	b.n	800584c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005838:	f7fe f980 	bl	8003b3c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005846:	d901      	bls.n	800584c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e007      	b.n	800585c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ee      	beq.n	8005838 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e056      	b.n	8005938 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fd ff29 	bl	80036fc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	ea42 0103 	orr.w	r1, r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	0c1b      	lsrs	r3, r3, #16
 8005908:	f003 0104 	and.w	r1, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69da      	ldr	r2, [r3, #28]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005926:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	4613      	mov	r3, r2
 800594e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_SPI_Transmit+0x26>
 8005962:	2302      	movs	r3, #2
 8005964:	e125      	b.n	8005bb2 <HAL_SPI_Transmit+0x272>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596e:	f7fe f8e5 	bl	8003b3c <HAL_GetTick>
 8005972:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005980:	2302      	movs	r3, #2
 8005982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005984:	e10c      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Transmit+0x52>
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005996:	e103      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2203      	movs	r2, #3
 800599c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	88fa      	ldrh	r2, [r7, #6]
 80059b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059de:	d107      	bne.n	80059f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d007      	beq.n	8005a0e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a16:	d147      	bne.n	8005aa8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_SPI_Transmit+0xea>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d138      	bne.n	8005a9c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3302      	adds	r3, #2
 8005a38:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a48:	e028      	b.n	8005a9c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d10f      	bne.n	8005a78 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	3302      	adds	r3, #2
 8005a66:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a76:	e011      	b.n	8005a9c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_SPI_Transmit+0x156>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d00a      	beq.n	8005a9c <HAL_SPI_Transmit+0x15c>
 8005a86:	f7fe f859 	bl	8003b3c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d802      	bhi.n	8005a9c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a9a:	e081      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1d1      	bne.n	8005a4a <HAL_SPI_Transmit+0x10a>
 8005aa6:	e048      	b.n	8005b3a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <HAL_SPI_Transmit+0x17a>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d13a      	bne.n	8005b30 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ada:	e029      	b.n	8005b30 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d110      	bne.n	8005b0c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b0a:	e011      	b.n	8005b30 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_SPI_Transmit+0x1ea>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d00a      	beq.n	8005b30 <HAL_SPI_Transmit+0x1f0>
 8005b1a:	f7fe f80f 	bl	8003b3c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d802      	bhi.n	8005b30 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b2e:	e037      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1d0      	bne.n	8005adc <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2201      	movs	r2, #1
 8005b42:	2102      	movs	r1, #2
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f838 	bl	8005bba <SPI_WaitFlagStateUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b54:	e024      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f896 	bl	8005c8c <SPI_CheckFlag_BSY>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d005      	beq.n	8005b72 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b70:	e016      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	77fb      	strb	r3, [r7, #31]
 8005b9c:	e000      	b.n	8005ba0 <HAL_SPI_Transmit+0x260>
  }

error:
 8005b9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005bc8:	e04d      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d049      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005bd8:	f7fd ffb0 	bl	8003b3c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d83e      	bhi.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bf6:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c00:	d111      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0a:	d004      	beq.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c14:	d107      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	d110      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6819      	ldr	r1, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005c3e:	400b      	ands	r3, r1
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e00e      	b.n	8005c84 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d101      	bne.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005c76:	2201      	movs	r2, #1
 8005c78:	e000      	b.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d1a3      	bne.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f7ff ff89 	bl	8005bba <SPI_WaitFlagStateUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb2:	f043 0220 	orr.w	r2, r3, #32
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e000      	b.n	8005cc0 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e01d      	b.n	8005d16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fd fd90 	bl	8003814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 f968 	bl	8005fdc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68da      	ldr	r2, [r3, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b06      	cmp	r3, #6
 8005d46:	d007      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d122      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d11b      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f06f 0202 	mvn.w	r2, #2
 8005d92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f8f8 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005dae:	e005      	b.n	8005dbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f8ea 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f8fb 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d122      	bne.n	8005e16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d11b      	bne.n	8005e16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f06f 0204 	mvn.w	r2, #4
 8005de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8ce 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005e02:	e005      	b.n	8005e10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8c0 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f8d1 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d122      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d11b      	bne.n	8005e6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0208 	mvn.w	r2, #8
 8005e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2204      	movs	r2, #4
 8005e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8a4 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005e56:	e005      	b.n	8005e64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f896 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8a7 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d122      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d11b      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0210 	mvn.w	r2, #16
 8005e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2208      	movs	r2, #8
 8005e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f87a 	bl	8005f9e <HAL_TIM_IC_CaptureCallback>
 8005eaa:	e005      	b.n	8005eb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f86c 	bl	8005f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f87d 	bl	8005fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0201 	mvn.w	r2, #1
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f846 	bl	8005f76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f989 	bl	8006228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d10e      	bne.n	8005f42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d107      	bne.n	8005f42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f842 	bl	8005fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d10e      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f06f 0220 	mvn.w	r2, #32
 8005f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f953 	bl	8006214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a40      	ldr	r2, [pc, #256]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d00f      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3d      	ldr	r2, [pc, #244]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3b      	ldr	r2, [pc, #236]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <TIM_Base_SetConfig+0x124>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d108      	bne.n	800602e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2f      	ldr	r2, [pc, #188]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d02b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d027      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <TIM_Base_SetConfig+0x118>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d023      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <TIM_Base_SetConfig+0x11c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2a      	ldr	r2, [pc, #168]	; (80060fc <TIM_Base_SetConfig+0x120>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a29      	ldr	r2, [pc, #164]	; (8006100 <TIM_Base_SetConfig+0x124>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d017      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <TIM_Base_SetConfig+0x128>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a27      	ldr	r2, [pc, #156]	; (8006108 <TIM_Base_SetConfig+0x12c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a26      	ldr	r2, [pc, #152]	; (800610c <TIM_Base_SetConfig+0x130>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a25      	ldr	r2, [pc, #148]	; (8006110 <TIM_Base_SetConfig+0x134>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a24      	ldr	r2, [pc, #144]	; (8006114 <TIM_Base_SetConfig+0x138>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <TIM_Base_SetConfig+0x13c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <TIM_Base_SetConfig+0x114>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_Base_SetConfig+0xf8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a0c      	ldr	r2, [pc, #48]	; (8006100 <TIM_Base_SetConfig+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	615a      	str	r2, [r3, #20]
}
 80060e2:	bf00      	nop
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40010000 	.word	0x40010000
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40000800 	.word	0x40000800
 80060fc:	40000c00 	.word	0x40000c00
 8006100:	40010400 	.word	0x40010400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800
 8006110:	40001800 	.word	0x40001800
 8006114:	40001c00 	.word	0x40001c00
 8006118:	40002000 	.word	0x40002000

0800611c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006130:	2302      	movs	r3, #2
 8006132:	e05a      	b.n	80061ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d01d      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1a      	ldr	r2, [pc, #104]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a17      	ldr	r2, [pc, #92]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a15      	ldr	r2, [pc, #84]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10c      	bne.n	80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40010400 	.word	0x40010400
 800620c:	40014000 	.word	0x40014000
 8006210:	40001800 	.word	0x40001800

08006214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e03f      	b.n	80062ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fd fafe 	bl	8003864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2224      	movs	r2, #36	; 0x24
 800626c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fb59 	bl	8006938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af02      	add	r7, sp, #8
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	f040 8090 	bne.w	8006418 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Receive+0x2e>
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e088      	b.n	800641a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_UART_Receive+0x40>
 8006312:	2302      	movs	r3, #2
 8006314:	e081      	b.n	800641a <HAL_UART_Receive+0x144>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2222      	movs	r2, #34	; 0x22
 8006328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800632c:	f7fd fc06 	bl	8003b3c <HAL_GetTick>
 8006330:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006346:	e05c      	b.n	8006402 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635e:	d12b      	bne.n	80063b8 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2200      	movs	r2, #0
 8006368:	2120      	movs	r1, #32
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f978 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e04f      	b.n	800641a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006392:	b29a      	uxth	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	3302      	adds	r3, #2
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	e030      	b.n	8006402 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	e024      	b.n	8006402 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	2120      	movs	r1, #32
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f94c 	bl	8006660 <UART_WaitOnFlagUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e023      	b.n	800641a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d108      	bne.n	80063ec <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6859      	ldr	r1, [r3, #4]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	60ba      	str	r2, [r7, #8]
 80063e6:	b2ca      	uxtb	r2, r1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e00a      	b.n	8006402 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d19d      	bne.n	8006348 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	e000      	b.n	800641a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006418:	2302      	movs	r3, #2
  }
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10d      	bne.n	8006476 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_UART_IRQHandler+0x52>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9e0 	bl	8006834 <UART_Receive_IT>
      return;
 8006474:	e0d0      	b.n	8006618 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80b0 	beq.w	80065de <HAL_UART_IRQHandler+0x1ba>
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_UART_IRQHandler+0x70>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80a5 	beq.w	80065de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <HAL_UART_IRQHandler+0x90>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	f043 0201 	orr.w	r2, r3, #1
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f003 0304 	and.w	r3, r3, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_UART_IRQHandler+0xb0>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	f043 0202 	orr.w	r2, r3, #2
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_UART_IRQHandler+0xd0>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	f043 0204 	orr.w	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <HAL_UART_IRQHandler+0xfa>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <HAL_UART_IRQHandler+0xee>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006516:	f043 0208 	orr.w	r2, r3, #8
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d077      	beq.n	8006616 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <HAL_UART_IRQHandler+0x11c>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f97a 	bl	8006834 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	bf0c      	ite	eq
 800654e:	2301      	moveq	r3, #1
 8006550:	2300      	movne	r3, #0
 8006552:	b2db      	uxtb	r3, r3
 8006554:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_UART_IRQHandler+0x144>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d031      	beq.n	80065cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f8c3 	bl	80066f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d123      	bne.n	80065c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_UART_IRQHandler+0x1fc>)
 800659a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fd fc0c 	bl	8003dbe <HAL_DMA_Abort_IT>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065b6:	4610      	mov	r0, r2
 80065b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ba:	e00e      	b.n	80065da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f845 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	e00a      	b.n	80065da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f841 	bl	800664c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ca:	e006      	b.n	80065da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f83d 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80065d8:	e01d      	b.n	8006616 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065da:	bf00      	nop
    return;
 80065dc:	e01b      	b.n	8006616 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <HAL_UART_IRQHandler+0x1d6>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f8b0 	bl	8006758 <UART_Transmit_IT>
    return;
 80065f8:	e00e      	b.n	8006618 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d009      	beq.n	8006618 <HAL_UART_IRQHandler+0x1f4>
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8f8 	bl	8006804 <UART_EndTransmit_IT>
    return;
 8006614:	e000      	b.n	8006618 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006616:	bf00      	nop
  }
}
 8006618:	3720      	adds	r7, #32
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	08006731 	.word	0x08006731

08006624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	4613      	mov	r3, r2
 800666e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006670:	e02c      	b.n	80066cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d028      	beq.n	80066cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <UART_WaitOnFlagUntilTimeout+0x30>
 8006680:	f7fd fa5c 	bl	8003b3c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	d21d      	bcs.n	80066cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800669e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e00f      	b.n	80066ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4013      	ands	r3, r2
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d0c3      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800670a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0201 	bic.w	r2, r2, #1
 800671a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ff7e 	bl	800664c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b21      	cmp	r3, #33	; 0x21
 800676a:	d144      	bne.n	80067f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	d11a      	bne.n	80067ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800678a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	1c9a      	adds	r2, r3, #2
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]
 800679e:	e00e      	b.n	80067be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	621a      	str	r2, [r3, #32]
 80067aa:	e008      	b.n	80067be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	1c59      	adds	r1, r3, #1
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6211      	str	r1, [r2, #32]
 80067b6:	781a      	ldrb	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4619      	mov	r1, r3
 80067cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10f      	bne.n	80067f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	e000      	b.n	80067f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067f6:	2302      	movs	r3, #2
  }
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff fefd 	bl	8006624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b22      	cmp	r3, #34	; 0x22
 8006846:	d171      	bne.n	800692c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	d123      	bne.n	800689a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10e      	bne.n	800687e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	1c9a      	adds	r2, r3, #2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
 800687c:	e029      	b.n	80068d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	b29b      	uxth	r3, r3
 8006886:	b2db      	uxtb	r3, r3
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28
 8006898:	e01b      	b.n	80068d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6858      	ldr	r0, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	6291      	str	r1, [r2, #40]	; 0x28
 80068b2:	b2c2      	uxtb	r2, r0
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e00c      	b.n	80068d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	1c58      	adds	r0, r3, #1
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	6288      	str	r0, [r1, #40]	; 0x28
 80068ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29b      	uxth	r3, r3
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4619      	mov	r1, r3
 80068e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d120      	bne.n	8006928 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0220 	bic.w	r2, r2, #32
 80068f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fe8a 	bl	8006638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e002      	b.n	800692e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
  }
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	b0bd      	sub	sp, #244	; 0xf4
 800693e:	af00      	add	r7, sp, #0
 8006940:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	68d9      	ldr	r1, [r3, #12]
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	ea40 0301 	orr.w	r3, r0, r1
 8006960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	431a      	orrs	r2, r3
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006990:	f021 010c 	bic.w	r1, r1, #12
 8006994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800699e:	430b      	orrs	r3, r1
 80069a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b2:	6999      	ldr	r1, [r3, #24]
 80069b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	ea40 0301 	orr.w	r3, r0, r1
 80069be:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ca:	f040 81a5 	bne.w	8006d18 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4bcd      	ldr	r3, [pc, #820]	; (8006d0c <UART_SetConfig+0x3d4>)
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d006      	beq.n	80069e8 <UART_SetConfig+0xb0>
 80069da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4bcb      	ldr	r3, [pc, #812]	; (8006d10 <UART_SetConfig+0x3d8>)
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f040 80cb 	bne.w	8006b7e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069e8:	f7fe fc34 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 80069ec:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069f4:	461c      	mov	r4, r3
 80069f6:	f04f 0500 	mov.w	r5, #0
 80069fa:	4622      	mov	r2, r4
 80069fc:	462b      	mov	r3, r5
 80069fe:	1891      	adds	r1, r2, r2
 8006a00:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006a04:	415b      	adcs	r3, r3
 8006a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006a0e:	1912      	adds	r2, r2, r4
 8006a10:	eb45 0303 	adc.w	r3, r5, r3
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f04f 0100 	mov.w	r1, #0
 8006a1c:	00d9      	lsls	r1, r3, #3
 8006a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a22:	00d0      	lsls	r0, r2, #3
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	1911      	adds	r1, r2, r4
 8006a2a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006a2e:	416b      	adcs	r3, r5
 8006a30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	1891      	adds	r1, r2, r2
 8006a42:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006a46:	415b      	adcs	r3, r3
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a4c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006a50:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006a54:	f7f9 fbd2 	bl	80001fc <__aeabi_uldivmod>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4bad      	ldr	r3, [pc, #692]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	011e      	lsls	r6, r3, #4
 8006a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a6a:	461c      	mov	r4, r3
 8006a6c:	f04f 0500 	mov.w	r5, #0
 8006a70:	4622      	mov	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	1891      	adds	r1, r2, r2
 8006a76:	67b9      	str	r1, [r7, #120]	; 0x78
 8006a78:	415b      	adcs	r3, r3
 8006a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a7c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006a80:	1912      	adds	r2, r2, r4
 8006a82:	eb45 0303 	adc.w	r3, r5, r3
 8006a86:	f04f 0000 	mov.w	r0, #0
 8006a8a:	f04f 0100 	mov.w	r1, #0
 8006a8e:	00d9      	lsls	r1, r3, #3
 8006a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a94:	00d0      	lsls	r0, r2, #3
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	1911      	adds	r1, r2, r4
 8006a9c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006aa0:	416b      	adcs	r3, r5
 8006aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	461a      	mov	r2, r3
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	1891      	adds	r1, r2, r2
 8006ab4:	6739      	str	r1, [r7, #112]	; 0x70
 8006ab6:	415b      	adcs	r3, r3
 8006ab8:	677b      	str	r3, [r7, #116]	; 0x74
 8006aba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006abe:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006ac2:	f7f9 fb9b 	bl	80001fc <__aeabi_uldivmod>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4b92      	ldr	r3, [pc, #584]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006acc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	2164      	movs	r1, #100	; 0x64
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	3332      	adds	r3, #50	; 0x32
 8006ade:	4a8d      	ldr	r2, [pc, #564]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	095b      	lsrs	r3, r3, #5
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006aec:	441e      	add	r6, r3
 8006aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f04f 0100 	mov.w	r1, #0
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	1894      	adds	r4, r2, r2
 8006afe:	66bc      	str	r4, [r7, #104]	; 0x68
 8006b00:	415b      	adcs	r3, r3
 8006b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006b08:	1812      	adds	r2, r2, r0
 8006b0a:	eb41 0303 	adc.w	r3, r1, r3
 8006b0e:	f04f 0400 	mov.w	r4, #0
 8006b12:	f04f 0500 	mov.w	r5, #0
 8006b16:	00dd      	lsls	r5, r3, #3
 8006b18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b1c:	00d4      	lsls	r4, r2, #3
 8006b1e:	4622      	mov	r2, r4
 8006b20:	462b      	mov	r3, r5
 8006b22:	1814      	adds	r4, r2, r0
 8006b24:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006b28:	414b      	adcs	r3, r1
 8006b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	461a      	mov	r2, r3
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	1891      	adds	r1, r2, r2
 8006b3c:	6639      	str	r1, [r7, #96]	; 0x60
 8006b3e:	415b      	adcs	r3, r3
 8006b40:	667b      	str	r3, [r7, #100]	; 0x64
 8006b42:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b4a:	f7f9 fb57 	bl	80001fc <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4b70      	ldr	r3, [pc, #448]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	3332      	adds	r3, #50	; 0x32
 8006b66:	4a6b      	ldr	r2, [pc, #428]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 0207 	and.w	r2, r3, #7
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4432      	add	r2, r6
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	e26d      	b.n	800705a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b7e:	f7fe fb55 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8006b82:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	f04f 0500 	mov.w	r5, #0
 8006b90:	4622      	mov	r2, r4
 8006b92:	462b      	mov	r3, r5
 8006b94:	1891      	adds	r1, r2, r2
 8006b96:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b98:	415b      	adcs	r3, r3
 8006b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ba0:	1912      	adds	r2, r2, r4
 8006ba2:	eb45 0303 	adc.w	r3, r5, r3
 8006ba6:	f04f 0000 	mov.w	r0, #0
 8006baa:	f04f 0100 	mov.w	r1, #0
 8006bae:	00d9      	lsls	r1, r3, #3
 8006bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bb4:	00d0      	lsls	r0, r2, #3
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	1911      	adds	r1, r2, r4
 8006bbc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006bc0:	416b      	adcs	r3, r5
 8006bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	1891      	adds	r1, r2, r2
 8006bd4:	6539      	str	r1, [r7, #80]	; 0x50
 8006bd6:	415b      	adcs	r3, r3
 8006bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8006bda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006bde:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006be2:	f7f9 fb0b 	bl	80001fc <__aeabi_uldivmod>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4b4a      	ldr	r3, [pc, #296]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006bec:	fba3 2302 	umull	r2, r3, r3, r2
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	011e      	lsls	r6, r3, #4
 8006bf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bf8:	461c      	mov	r4, r3
 8006bfa:	f04f 0500 	mov.w	r5, #0
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c06:	415b      	adcs	r3, r3
 8006c08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c0e:	1912      	adds	r2, r2, r4
 8006c10:	eb45 0303 	adc.w	r3, r5, r3
 8006c14:	f04f 0000 	mov.w	r0, #0
 8006c18:	f04f 0100 	mov.w	r1, #0
 8006c1c:	00d9      	lsls	r1, r3, #3
 8006c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c22:	00d0      	lsls	r0, r2, #3
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	1911      	adds	r1, r2, r4
 8006c2a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006c2e:	416b      	adcs	r3, r5
 8006c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	6439      	str	r1, [r7, #64]	; 0x40
 8006c44:	415b      	adcs	r3, r3
 8006c46:	647b      	str	r3, [r7, #68]	; 0x44
 8006c48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c4c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006c50:	f7f9 fad4 	bl	80001fc <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	2164      	movs	r1, #100	; 0x64
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	3332      	adds	r3, #50	; 0x32
 8006c6c:	4a29      	ldr	r2, [pc, #164]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c7a:	441e      	add	r6, r3
 8006c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c80:	4618      	mov	r0, r3
 8006c82:	f04f 0100 	mov.w	r1, #0
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	1894      	adds	r4, r2, r2
 8006c8c:	63bc      	str	r4, [r7, #56]	; 0x38
 8006c8e:	415b      	adcs	r3, r3
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c96:	1812      	adds	r2, r2, r0
 8006c98:	eb41 0303 	adc.w	r3, r1, r3
 8006c9c:	f04f 0400 	mov.w	r4, #0
 8006ca0:	f04f 0500 	mov.w	r5, #0
 8006ca4:	00dd      	lsls	r5, r3, #3
 8006ca6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006caa:	00d4      	lsls	r4, r2, #3
 8006cac:	4622      	mov	r2, r4
 8006cae:	462b      	mov	r3, r5
 8006cb0:	1814      	adds	r4, r2, r0
 8006cb2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006cb6:	414b      	adcs	r3, r1
 8006cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	6339      	str	r1, [r7, #48]	; 0x30
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006cd4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cd8:	f7f9 fa90 	bl	80001fc <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	2164      	movs	r1, #100	; 0x64
 8006cea:	fb01 f303 	mul.w	r3, r1, r3
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	3332      	adds	r3, #50	; 0x32
 8006cf4:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <UART_SetConfig+0x3dc>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	f003 0207 	and.w	r2, r3, #7
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4432      	add	r2, r6
 8006d08:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006d0a:	e1a6      	b.n	800705a <UART_SetConfig+0x722>
 8006d0c:	40011000 	.word	0x40011000
 8006d10:	40011400 	.word	0x40011400
 8006d14:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4bd1      	ldr	r3, [pc, #836]	; (8007064 <UART_SetConfig+0x72c>)
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d006      	beq.n	8006d32 <UART_SetConfig+0x3fa>
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4bcf      	ldr	r3, [pc, #828]	; (8007068 <UART_SetConfig+0x730>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	f040 80ca 	bne.w	8006ec6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d32:	f7fe fa8f 	bl	8005254 <HAL_RCC_GetPCLK2Freq>
 8006d36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d3e:	461c      	mov	r4, r3
 8006d40:	f04f 0500 	mov.w	r5, #0
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	1891      	adds	r1, r2, r2
 8006d4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d4c:	415b      	adcs	r3, r3
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d54:	1912      	adds	r2, r2, r4
 8006d56:	eb45 0303 	adc.w	r3, r5, r3
 8006d5a:	f04f 0000 	mov.w	r0, #0
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	00d9      	lsls	r1, r3, #3
 8006d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d68:	00d0      	lsls	r0, r2, #3
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	eb12 0a04 	adds.w	sl, r2, r4
 8006d72:	eb43 0b05 	adc.w	fp, r3, r5
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	008b      	lsls	r3, r1, #2
 8006d8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d90:	0082      	lsls	r2, r0, #2
 8006d92:	4650      	mov	r0, sl
 8006d94:	4659      	mov	r1, fp
 8006d96:	f7f9 fa31 	bl	80001fc <__aeabi_uldivmod>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4bb3      	ldr	r3, [pc, #716]	; (800706c <UART_SetConfig+0x734>)
 8006da0:	fba3 2302 	umull	r2, r3, r3, r2
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	011e      	lsls	r6, r3, #4
 8006da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006dac:	4618      	mov	r0, r3
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	1894      	adds	r4, r2, r2
 8006db8:	623c      	str	r4, [r7, #32]
 8006dba:	415b      	adcs	r3, r3
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dc2:	1812      	adds	r2, r2, r0
 8006dc4:	eb41 0303 	adc.w	r3, r1, r3
 8006dc8:	f04f 0400 	mov.w	r4, #0
 8006dcc:	f04f 0500 	mov.w	r5, #0
 8006dd0:	00dd      	lsls	r5, r3, #3
 8006dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dd6:	00d4      	lsls	r4, r2, #3
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	1814      	adds	r4, r2, r0
 8006dde:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8006de2:	414b      	adcs	r3, r1
 8006de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	008b      	lsls	r3, r1, #2
 8006dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e02:	0082      	lsls	r2, r0, #2
 8006e04:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006e08:	f7f9 f9f8 	bl	80001fc <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4b96      	ldr	r3, [pc, #600]	; (800706c <UART_SetConfig+0x734>)
 8006e12:	fba3 1302 	umull	r1, r3, r3, r2
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	2164      	movs	r1, #100	; 0x64
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	3332      	adds	r3, #50	; 0x32
 8006e24:	4a91      	ldr	r2, [pc, #580]	; (800706c <UART_SetConfig+0x734>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e30:	441e      	add	r6, r3
 8006e32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e36:	4618      	mov	r0, r3
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	1894      	adds	r4, r2, r2
 8006e42:	61bc      	str	r4, [r7, #24]
 8006e44:	415b      	adcs	r3, r3
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e4c:	1812      	adds	r2, r2, r0
 8006e4e:	eb41 0303 	adc.w	r3, r1, r3
 8006e52:	f04f 0400 	mov.w	r4, #0
 8006e56:	f04f 0500 	mov.w	r5, #0
 8006e5a:	00dd      	lsls	r5, r3, #3
 8006e5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e60:	00d4      	lsls	r4, r2, #3
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	1814      	adds	r4, r2, r0
 8006e68:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f04f 0100 	mov.w	r1, #0
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	008b      	lsls	r3, r1, #2
 8006e88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e8c:	0082      	lsls	r2, r0, #2
 8006e8e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006e92:	f7f9 f9b3 	bl	80001fc <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b74      	ldr	r3, [pc, #464]	; (800706c <UART_SetConfig+0x734>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	; 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	3332      	adds	r3, #50	; 0x32
 8006eae:	4a6f      	ldr	r2, [pc, #444]	; (800706c <UART_SetConfig+0x734>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f003 020f 	and.w	r2, r3, #15
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4432      	add	r2, r6
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e0c9      	b.n	800705a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ec6:	f7fe f9b1 	bl	800522c <HAL_RCC_GetPCLK1Freq>
 8006eca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ed2:	461c      	mov	r4, r3
 8006ed4:	f04f 0500 	mov.w	r5, #0
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	1891      	adds	r1, r2, r2
 8006ede:	6139      	str	r1, [r7, #16]
 8006ee0:	415b      	adcs	r3, r3
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ee8:	1912      	adds	r2, r2, r4
 8006eea:	eb45 0303 	adc.w	r3, r5, r3
 8006eee:	f04f 0000 	mov.w	r0, #0
 8006ef2:	f04f 0100 	mov.w	r1, #0
 8006ef6:	00d9      	lsls	r1, r3, #3
 8006ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006efc:	00d0      	lsls	r0, r2, #3
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	eb12 0804 	adds.w	r8, r2, r4
 8006f06:	eb43 0905 	adc.w	r9, r3, r5
 8006f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f04f 0100 	mov.w	r1, #0
 8006f16:	f04f 0200 	mov.w	r2, #0
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	008b      	lsls	r3, r1, #2
 8006f20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f24:	0082      	lsls	r2, r0, #2
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 f967 	bl	80001fc <__aeabi_uldivmod>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4b4e      	ldr	r3, [pc, #312]	; (800706c <UART_SetConfig+0x734>)
 8006f34:	fba3 2302 	umull	r2, r3, r3, r2
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	011e      	lsls	r6, r3, #4
 8006f3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f40:	4618      	mov	r0, r3
 8006f42:	f04f 0100 	mov.w	r1, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	1894      	adds	r4, r2, r2
 8006f4c:	60bc      	str	r4, [r7, #8]
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f56:	1812      	adds	r2, r2, r0
 8006f58:	eb41 0303 	adc.w	r3, r1, r3
 8006f5c:	f04f 0400 	mov.w	r4, #0
 8006f60:	f04f 0500 	mov.w	r5, #0
 8006f64:	00dd      	lsls	r5, r3, #3
 8006f66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f6a:	00d4      	lsls	r4, r2, #3
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	462b      	mov	r3, r5
 8006f70:	1814      	adds	r4, r2, r0
 8006f72:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006f76:	414b      	adcs	r3, r1
 8006f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f04f 0100 	mov.w	r1, #0
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	008b      	lsls	r3, r1, #2
 8006f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f96:	0082      	lsls	r2, r0, #2
 8006f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f9c:	f7f9 f92e 	bl	80001fc <__aeabi_uldivmod>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4b31      	ldr	r3, [pc, #196]	; (800706c <UART_SetConfig+0x734>)
 8006fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2164      	movs	r1, #100	; 0x64
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	3332      	adds	r3, #50	; 0x32
 8006fb8:	4a2c      	ldr	r2, [pc, #176]	; (800706c <UART_SetConfig+0x734>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	441e      	add	r6, r3
 8006fc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f04f 0100 	mov.w	r1, #0
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	1894      	adds	r4, r2, r2
 8006fd6:	603c      	str	r4, [r7, #0]
 8006fd8:	415b      	adcs	r3, r3
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe0:	1812      	adds	r2, r2, r0
 8006fe2:	eb41 0303 	adc.w	r3, r1, r3
 8006fe6:	f04f 0400 	mov.w	r4, #0
 8006fea:	f04f 0500 	mov.w	r5, #0
 8006fee:	00dd      	lsls	r5, r3, #3
 8006ff0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ff4:	00d4      	lsls	r4, r2, #3
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	1814      	adds	r4, r2, r0
 8006ffc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007000:	414b      	adcs	r3, r1
 8007002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4618      	mov	r0, r3
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	008b      	lsls	r3, r1, #2
 800701c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007020:	0082      	lsls	r2, r0, #2
 8007022:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007026:	f7f9 f8e9 	bl	80001fc <__aeabi_uldivmod>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4b0f      	ldr	r3, [pc, #60]	; (800706c <UART_SetConfig+0x734>)
 8007030:	fba3 1302 	umull	r1, r3, r3, r2
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	2164      	movs	r1, #100	; 0x64
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	3332      	adds	r3, #50	; 0x32
 8007042:	4a0a      	ldr	r2, [pc, #40]	; (800706c <UART_SetConfig+0x734>)
 8007044:	fba2 2303 	umull	r2, r3, r2, r3
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	f003 020f 	and.w	r2, r3, #15
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4432      	add	r2, r6
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	e7ff      	b.n	800705a <UART_SetConfig+0x722>
 800705a:	bf00      	nop
 800705c:	37f4      	adds	r7, #244	; 0xf4
 800705e:	46bd      	mov	sp, r7
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	40011000 	.word	0x40011000
 8007068:	40011400 	.word	0x40011400
 800706c:	51eb851f 	.word	0x51eb851f

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	; (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	; (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	; (80070b4 <__libc_init_array+0x44>)
 8007084:	f000 f842 	bl	800710c <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	080075dc 	.word	0x080075dc
 80070ac:	080075dc 	.word	0x080075dc
 80070b0:	080075dc 	.word	0x080075dc
 80070b4:	080075e0 	.word	0x080075e0

080070b8 <memset>:
 80070b8:	4402      	add	r2, r0
 80070ba:	4603      	mov	r3, r0
 80070bc:	4293      	cmp	r3, r2
 80070be:	d100      	bne.n	80070c2 <memset+0xa>
 80070c0:	4770      	bx	lr
 80070c2:	f803 1b01 	strb.w	r1, [r3], #1
 80070c6:	e7f9      	b.n	80070bc <memset+0x4>

080070c8 <strcat>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	4602      	mov	r2, r0
 80070cc:	7814      	ldrb	r4, [r2, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	3201      	adds	r2, #1
 80070d2:	2c00      	cmp	r4, #0
 80070d4:	d1fa      	bne.n	80070cc <strcat+0x4>
 80070d6:	3b01      	subs	r3, #1
 80070d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	d1f9      	bne.n	80070d8 <strcat+0x10>
 80070e4:	bd10      	pop	{r4, pc}

080070e6 <strncpy>:
 80070e6:	b510      	push	{r4, lr}
 80070e8:	3901      	subs	r1, #1
 80070ea:	4603      	mov	r3, r0
 80070ec:	b132      	cbz	r2, 80070fc <strncpy+0x16>
 80070ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070f2:	f803 4b01 	strb.w	r4, [r3], #1
 80070f6:	3a01      	subs	r2, #1
 80070f8:	2c00      	cmp	r4, #0
 80070fa:	d1f7      	bne.n	80070ec <strncpy+0x6>
 80070fc:	441a      	add	r2, r3
 80070fe:	2100      	movs	r1, #0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <strncpy+0x20>
 8007104:	bd10      	pop	{r4, pc}
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <strncpy+0x1a>

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	bf00      	nop
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
